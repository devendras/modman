<?php
 class Omx_Hooks_Model_Xml_Item_Price_Update_Request extends Omx_Hooks_Model_Xml_Abstract { protected $_product; protected $_root; public function __construct (Mage_Catalog_Model_Product $product) { parent::__construct(); $this->_product = $product; $this->createRootElement(); $this->appendUdiParams(); $this->appendPrices(); } protected function createRootElement () { $rootElement = $this->createSafeElement('ItemPriceUpdateRequest'); $versionAttribute = $this->xml->createAttribute('version'); $rootElement->appendChild( $versionAttribute ); $rootAttributeValue = $this->xml->createTextNode('1.00'); $versionAttribute->appendChild($rootAttributeValue); $rootElement = $this->xml->appendChild($rootElement); $this->_root = $rootElement; } protected function appendUdiParams () { $UDIParameter = $this->_root->appendChild( $this->createSafeElement('UDIParameter') ); $itemCodeParameter = $this->createSafeElement('Parameter', $this->_product->getSku()); $itemCodeParameterAttr= $this->xml->createAttribute('key'); $itemCodeParameterAttr->appendChild( $this->xml->createTextNode('ItemCode') ); $itemCodeParameter->appendChild($itemCodeParameterAttr); $typeParameter = $this->createSafeElement('Parameter', 'DefaultPrice'); $typeParameterAttr= $this->xml->createAttribute('key'); $typeParameterAttr->appendChild( $this->xml->createTextNode('Type') ); $typeParameter->appendChild($typeParameterAttr); $UDIParameter->appendChild($itemCodeParameter); $UDIParameter->appendChild($typeParameter); } protected function appendPrices () { $prices = $this->_root->appendChild( $this->createSafeElement('PricePoints') ); $priceTypeAttr= $this->xml->createAttribute('priceType'); $priceTypeAttr->appendChild( $this->xml->createTextNode('unit') ); $prices->appendChild($priceTypeAttr); $price = $prices->appendChild( $this->createSafeElement('PricePoint') ); $price->appendChild( $this->createSafeElement('Quantity', 1) ); $price->appendChild( $this->createSafeElement('Price', $this->_product->getPrice()) ); $price->appendChild( $this->createSafeElement('ShippingHandling', 0) ); $tierPrices = $this->_product->getTierPrice(); foreach ($tierPrices as $tier_price) { if ($tier_price['all_groups']) { $qty = $tier_price['price_qty']; $intqty = intval($qty); if ($qty != $intqty) { $fullOrderErrorData = array( 'request' => 'creating prices for product id: ' . $this->_product->getId(), 'response'=> 'the "quantities" have to be integers, no decimal values allowed', 'comment' => 'please, check the product tier prices and fix the problem' ); $this->log($fullOrderErrorData); throw new Exception('The tier price quantities must be integers. OMX doesn\'t accept decimal quantities, so the price information of this product was not transmitted.'); } $price = $prices->appendChild( $this->createSafeElement('PricePoint') ); $price->appendChild( $this->createSafeElement('Quantity', $intqty) ); $price->appendChild( $this->createSafeElement('Price', $tier_price['price']) ); $price->appendChild( $this->createSafeElement('ShippingHandling', 0) ); } } } }