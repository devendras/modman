<?php
 class Omx_Hooks_Model_Xml_Subitem_Update_Request extends Omx_Hooks_Model_Xml_Abstract { protected $_parentProductSku; protected $_parent; protected $_products; protected $_omx_products; protected $_root; public function __construct (array $products) { parent::__construct(); $this->_parent = $products[0]; $this->_products = $products[1]; $this->_omx_products = $products[2]; $this->createRootElement(); $this->appendUdiParams(); $this->appendItems(); } protected function createRootElement () { $rootElement = $this->createSafeElement('SubItemUpdateRequest'); $versionAttribute = $this->xml->createAttribute('version'); $rootElement->appendChild( $versionAttribute ); $rootAttributeValue = $this->xml->createTextNode('1.00'); $versionAttribute->appendChild($rootAttributeValue); $rootElement = $this->xml->appendChild($rootElement); $this->_root = $rootElement; } protected function appendUdiParams () { $udiParameter = $this->_root->appendChild($this->createSafeElement('UDIParameter')); $autoAdoptElement = $this->createSafeElement('Parameter', 'True'); $autoAdoptKeyAttribute= $this->xml->createAttribute('key'); $autoAdoptAttributeText = $this->xml->createTextNode('AutoAdopt'); $autoAdoptKeyAttribute->appendChild($autoAdoptAttributeText); $autoAdoptElement->appendChild($autoAdoptKeyAttribute); $udiParameter->appendChild ($autoAdoptElement); } protected function appendItems () { $items = $this->_root->appendChild( $this->createSafeElement('Items') ); $this->_parentProductSku = $this->_parent->getSku(); $configAttr = $this->_parent->getTypeInstance(true)->getConfigurableAttributesAsArray($this->_parent); $magento_products = array(); foreach ($this->_products as $product) { $magento_products[] = strtoupper($product->getSku()); $item = $items->appendChild( $this->createSafeElement('Item') ); $itemCode = $this->xml->createAttribute('itemCode'); $itemCodeValue = $this->xml->createTextNode($product->getSku()); $itemCode->appendChild($itemCodeValue); $item->appendChild($itemCode); $parentItemCode = $this->xml->createAttribute('parentItemCode'); $parentItemCodeValue = $this->xml->createTextNode($this->_parentProductSku); $parentItemCode->appendChild($parentItemCodeValue); $item->appendChild($parentItemCode); $parentItemCode = $this->xml->createAttribute('action'); $parentItemCodeValue = $this->xml->createTextNode('Update'); $parentItemCode->appendChild($parentItemCodeValue); $item->appendChild($parentItemCode); for ($i = 0; $i < 3; $i++) { if (array_key_exists($i, $configAttr)) { $dimension = $this->createSafeElement('Dimension'); $dimAttr = $this->xml->createAttribute('dimension'); switch ($i) { case 0: $dimValue = $this->xml->createTextNode('X'); break; case 1: $dimValue = $this->xml->createTextNode('Y'); break; case 2: $dimValue = $this->xml->createTextNode('Z'); break; } $dimAttr->appendChild($dimValue); $dimension->appendChild($dimAttr); $value = $this->createSafeElement('Value'); $valueIndex = $product->getData($configAttr[$i]['attribute_code']); list($valueLabel, $valueSurcharge) = $this->getValueLabelAndSurcharge($configAttr[$i]['values'], $valueIndex); $value->appendChild( $this->createSafeElement('Description', $valueLabel) ); $value->appendChild( $this->createSafeElement('Surcharge', $valueSurcharge) ); $dimension->appendChild( $value ); $item->appendChild( $dimension ); } } } foreach ($this->_omx_products as $omxSubitemCode) { if (in_array(strtoupper($omxSubitemCode), $magento_products) === false) { $item = $items->appendChild( $this->createSafeElement('Item') ); $itemCode = $this->xml->createAttribute('itemCode'); $itemCodeValue = $this->xml->createTextNode($omxSubitemCode); $itemCode->appendChild($itemCodeValue); $item->appendChild($itemCode); $parentItemCode = $this->xml->createAttribute('parentItemCode'); $parentItemCodeValue = $this->xml->createTextNode($this->_parentProductSku); $parentItemCode->appendChild($parentItemCodeValue); $item->appendChild($parentItemCode); $parentItemCode = $this->xml->createAttribute('action'); $parentItemCodeValue = $this->xml->createTextNode('Dissociate'); $parentItemCode->appendChild($parentItemCodeValue); $item->appendChild($parentItemCode); } } } private function getValueLabelAndSurcharge ($values, $index) { foreach ($values as $value) { if ($value['value_index'] === $index) { if ($value['is_percent']) { $fullOrderErrorData = array( 'request' => 'updating sub-items for product id: ' .$this->_parentProductSku. ', dimension label: ' .$value['label'], 'response'=> 'the price type "percentage" is not suported in OMX', 'comment' => 'please, change the price type if you want to send the information to OMX' ); $this->log($fullOrderErrorData); throw new Exception('The price type "percentage" for Super Product Attributes configuration is not supported in OMX.'); } return array($value['label'], $value['pricing_value']); } } return ''; } } 