<?php  class Omx_Hooks_Model_Xml_Order_Pricing_Request extends Omx_Hooks_Model_Xml_Abstract { public $xml; protected $_quote; protected $_root; protected $_customer = false; protected $_pricingType = 'complete'; public function __construct ($arguments = array()) { parent::__construct(); $this->_quote = $arguments[0]; $this->_pricingType = $arguments[1]; $this->createRootElement(); $this->_customer = $this->_quote->getCustomer(); if ($this->_quote instanceof Mage_Sales_Model_Quote) { $this->appendUdiParams(); $this->appendHeader(); $this->appendCustomer(); $this->appendShipping(); $this->appendAddressInformation(); $this->appendItems(); } else { $fullOrderErrorData = array( 'request' => 'get full order data for:' . $order->getId(), 'response'=> 'order object was not found or it failed loading the attributes or is malformed by 3rd party', 'comment' => 'this should not happen unless something goes wrong with custom attributes loading' ); $this->log($fullOrderErrorData); return false; } } protected function createRootElement () { $rootElement = $this->createSafeElement('OrderPricingRequest'); $rootVersionElement = $this->xml->createAttribute('version'); $rootElement->appendChild( $rootVersionElement ); $rootVersionValue = $this->xml->createTextNode('1.00'); $rootVersionElement->appendChild($rootVersionValue); $this->xml->appendChild($rootElement); $this->_root = $rootElement; } protected function appendUdiParams () { $udiParameter = $this->_root->appendChild($this->createSafeElement('UDIParameter')); } protected function appendHeader () { $headerElement = $this->_root->appendChild( $this->createSafeElement('Header') ); $originTypeElement = $this->createSafeElement('OriginType', '3'); $headerElement->appendChild( $originTypeElement ); $customerIpElement = $this->createSafeElement('CustomerIP', $this->_quote->getRemoteIp()); $headerElement->appendChild( $customerIpElement ); $keycode = ($this->_quote->getOmxOrderKeycode()) ? $this->_quote->getOmxOrderKeycode(): Mage::getModel('hooks/connector')->defaultKeycode; $keyCodeElement = $this->createSafeElement('Keycode', $keycode); $headerElement->appendChild( $keyCodeElement ); } protected function appendCustomer () { $omxCustomerNumber = ($this->_customer->getOmxCustomerNumber())? $this->_customer->getOmxCustomerNumber() :''; $customerElement = $this->_root->appendChild( $this->createSafeElement('Customer')); $customerAttributeCustNumText = $this->xml->createTextNode($omxCustomerNumber); $customerAttributeCustNum = $this->xml->createAttribute('customerNumber'); $customerAttributeCustNum->appendChild($customerAttributeCustNumText); $customerElement->appendChild($customerAttributeCustNum); $this->_root->appendChild($customerElement); $flagData = $this->createSafeElement('FlagData'); $customerElement->appendChild( $flagData ); $customer = Mage::getSingleton('customer/session')->getCustomer(); $omxTaxExempt = $customer->getOmxTaxExempt(); if ($omxTaxExempt !== null) { $flagTaxEx = $this->createSafeElement('Flag', $omxTaxExempt ? 'True' : 'False'); $flagTaxExAttribute = $this->xml->createAttribute('name'); $flagTaxExAttributeValue = $this->xml->createTextNode('Business'); $flagTaxExAttribute->appendChild( $flagTaxExAttributeValue ); $flagTaxEx->appendChild( $flagTaxExAttribute ); $flagData->appendChild( $flagTaxEx ); } } protected function appendShipping () { $shippingInformationElement = $this->_root->appendChild( $this->createSafeElement('ShippingInformation') ); $shipping = $this->_quote->getShippingAddress(); $shippingMethod = $shipping->getShippingDescription(); $appendSHChildren = false; if(!$this->_quote->isVirtual() && $shippingMethod != '') { $appendSHChildren = true; $methodNameElement = $this->createSafeElement("MethodName", $shippingMethod); $forcedAmountElement = $this->createSafeElement("ForcedAmount", $shipping->getBaseShippingAmount()); } if ($this->_quote->isVirtual) { $appendSHChildren = true; $methodNameElement = $this->createSafeElement("MethodName", Mage::getModel('hooks/connector')->shippingMethodNonShippable); $forcedAmountElement = $this->createSafeElement("ForcedAmount", 0); } if($appendSHChildren) { $shipingPriceDiscountable = (Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == '1') ? "True" : "False"; $forcedAmountAttribteText = $this->xml->createTextNode($shipingPriceDiscountable); $forcedAmountAttribute = $this->xml->createAttribute('discountable'); $forcedAmountAttribute->appendChild($forcedAmountAttribteText); $forcedAmountElement->appendChild($forcedAmountAttribute); $shippingInformationElement->appendChild($methodNameElement); $shippingInformationElement->appendChild($forcedAmountElement); } } protected function appendAddressInformation() { $shippingData = $this->_getShippingAddressData(); $addressInformationElement = $this->createSafeElement('AddressInformation'); $this->_root->appendChild($addressInformationElement); if($shippingData != false) { $shipToAddressElement = $this->createSafeElement('Address'); $shipToAddressElementAttributeText = $this->xml->createTextNode("ShipTo"); $shipToAddressElementAttribute = $this->xml->createAttribute('type'); $shipToAddressElementAttribute->appendChild($shipToAddressElementAttributeText); $shipToAddressElement->appendChild($shipToAddressElementAttribute); $addressInformationElement->appendChild($shipToAddressElement); $ZipElement = $this->createSafeElement("ZIP",$shippingData["postcode"]); $StateElement = $this->createSafeElement("State", $shippingData["region"]); $TldElement = $this->createSafeElement('TLD', $shippingData["country"]); $shipToAddressElement->appendChild($ZipElement); $shipToAddressElement->appendChild($StateElement); $shipToAddressElement->appendChild($TldElement); } } protected function appendItems () { $items = $this->_quote->getAllItems (); $ruleIDs = array(); $orderDetail = $this->_root->appendChild( $this->createSafeElement('OrderDetail') ); foreach( $items as $key => $item ){ if ($item->getProductType() === "configurable") { $parent_price = $item->getData('base_price'); $parent_qty = $item->getQty(); } elseif ( in_array($item->getProductType(), array("simple", "downloadable", "virtual", "giftcard") ) ) { $lineItem = $this->createSafeElement('LineItem'); $lineItem->setAttribute('externalLineReference', $item->getItemId()); $itemCode = $this->createSafeElement('ItemCode', $item->getSku()); $lineItem->appendChild( $itemCode ); if($item->getParentItemId() !== NULL) { $lineItemPrice = $parent_price; $lineItemQty = $parent_qty; } else { $lineItemPrice = $item->getData('base_price'); $lineItemQty = round($item->getQty()); } $quantityElement = $this->createSafeElement('Quantity', $lineItemQty); $lineItem->appendChild( $quantityElement ); $priceElement = $this->createSafeElement('ForcedPrice', $lineItemPrice); $lineItem->appendChild( $priceElement ); if (Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') && $item->getProductType() != "giftcard") { $priceElement->setAttribute('discountable', 'True'); } $itemOptions = $item->getProductOptions(); $itemCustomizationData = $this->createSafeElement('ItemCustomizationData'); if (is_array($itemOptions)) { if (array_key_exists('options', $itemOptions)) { $continuity = Mage::getModel('hooks/connector')->continuityCustomOptionName; foreach ($itemOptions['options'] as $value) { if ($value['label'] === $continuity){ $configurationNameValue = $this->xml->createTextNode($value['value']); $configurationName = $this->xml->createAttribute('configurationName'); $configurationName->appendChild($configurationNameValue); $standingOrder = $this->createSafeElement('StandingOrder'); $standingOrder->appendChild($configurationName); $lineItem->appendChild($standingOrder); } else { $personalizationNameAttributeValue = $this->xml->createTextNode($value['label']); $personalizationNameAttribute = $this->xml->createAttribute("fieldName"); $personalizationNameAttribute->appendChild($personalizationNameAttributeValue); $customizationFieldValue = $this->createSafeElement('Value', $value['value']); $customizationField = $this->createSafeElement('CustomizationField'); $customizationField->appendChild($personalizationNameAttribute); $customizationField->appendChild($customizationFieldValue); $itemCustomizationData->appendChild( $customizationField ); } } } } $itemExtras = unserialize($item->getOmxExtraCustomizations()); if (is_array($itemExtras)){ foreach ($itemExtras as $extraKey => $extraValue) { $personalizationNameAttributeValue = $this->xml->createTextNode($extraKey); $personalizationNameAttribute = $this->xml->createAttribute("fieldName"); $personalizationNameAttribute->appendChild($personalizationNameAttributeValue); $customizationFieldValue = $this->createSafeElement('Value', $extraValue); $customizationField = $this->createSafeElement('CustomizationField'); $customizationField->appendChild($personalizationNameAttribute); $customizationField->appendChild($customizationFieldValue); $itemCustomizationData->appendChild( $customizationField ); } } if ($itemCustomizationData->hasChildNodes()) $lineItem->appendChild( $itemCustomizationData ); $ppId = $item->getOmxPaymentplanId(); if (is_int($ppId) && $ppId > 0) { $paymentplan = $this->createSafeElement('PaymentPlanID', $ppId); $lineItem->appendChild( $paymentplan ); } $orderDetail->appendChild( $lineItem ); } } if($this->_quote->getAppliedRuleIds() !== NULL && $this->_quote->getAppliedRuleIds() !== ''){ if(Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == "1") { throw new Exception("Magento Coupons and Omx Marketing Policies are mutual exlusive"); } $quoteTotals = $this->_quote->getTotals(); if(isset($quoteTotals['discount'])) { $lineItem = $this->createSafeElement('LineItem'); $lineItem->setAttribute('externalLineReference', '-1'); $itemCode = $this->createSafeElement('ItemCode', 'MagentoCoupon'); $lineItem->appendChild( $itemCode ); $quantity = $this->createSafeElement('Quantity', 1); $lineItem->appendChild( $quantity ); $discountPrice = $quoteTotals['discount']->getValue(); $priceElement = $this->createSafeElement('ForcedPrice', $discountPrice); $lineItem->appendChild($priceElement); $orderDetail->appendChild( $lineItem ); } } } protected function appendCustomFields () { $customFieldsElement = $this->_root->appendChild( $this->createSafeElement('CustomFields') ); $reportElement = $this->createSafeElement('Report'); $customFieldsElement->appendChild( $reportElement ); $omxCustomAttributes = unserialize($this->_fullOrder->getOmxOrderCustomFields()); if (is_array($omxCustomAttributes)){ foreach ($omxCustomAttributes as $key => $value) { $fieldElement = $this->createSafeElement('Field' ,$value); $fieldNameAttribute = $this->xml->createAttribute('fieldName'); $fieldNameAttributeValue = $this->xml->createTextNode($key); $fieldNameAttribute->appendChild($fieldNameAttributeValue); $fieldElement->appendChild($fieldNameAttribute); $reportElement->appendChild($fieldElement); } } } private function _getShippingAddressData() { $customer = $this->_quote->getCustomer(); $shippingAddressData = array( 'region' => '', 'postcode' => '', 'country' => '', ); $usedAddress = $this->_quote->getShippingAddress(); if ($this->_verifyShippingAddress($usedAddress, $shippingAddressData) ) { return $shippingAddressData; } $usedAddress = Mage::getModel('customer/address')->load($customer->getDefaultShipping()); if ($this->_verifyShippingAddress($usedAddress, $shippingAddressData) ) { return $shippingAddressData; } $usedAddress = $this->_quote->getBillingAddress(); if ($this->_verifyShippingAddress($usedAddress, $shippingAddressData)) { return $shippingAddressData; } $usedAddress = Mage::getModel('customer/address')->load($customer->getDefaultBilling()); if ($this->_verifyShippingAddress($usedAddress, $shippingAddressData) ) { return $shippingAddressData; } $region = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_DEFAULT_REGION); $shippingAddressData['region'] = Mage::getModel('directory/region')->load($region)->getCode(); $shippingAddressData['postcode'] = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_DEFAULT_POSTCODE); $shippingAddressData['country'] = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_DEFAULT_COUNTRY); if ($this->_verifyShippingAddress($shippingAddressData)) { return $shippingAddressData; } else { return false; } } private function _verifyShippingAddress($verifyAddress, & $dataToUse=array()) { $valid = false; if (!$verifyAddress instanceof Mage_Customer_Model_Address && !$verifyAddress instanceof Mage_Sales_Model_Quote_Address && !is_array($verifyAddress)) { return false; } if($verifyAddress instanceof Mage_Customer_Model_Address || $verifyAddress instanceof Mage_Sales_Model_Quote_Address) { if ($verifyAddress->getRegionCode() && $verifyAddress->getCountry() && $verifyAddress->getPostcode() ) { $shippingCountryCode = $verifyAddress->getCountry(); $shippingCountryCode = ('GB' === $shippingCountryCode) ? 'UK' : $shippingCountryCode; if ($this->_isOmxStatedCountry($shippingCountryCode)) { $shippingStateCode = substr($verifyAddress->getRegionCode(), 0, 10); } else { $shippingStateCode = ''; } $dataToUse['region'] = $shippingStateCode; $dataToUse['postcode'] = $verifyAddress->getPostcode(); $dataToUse['country'] = $shippingCountryCode; $valid = true; } } elseif ( array_key_exists('region', $verifyAddress) && array_key_exists('postcode', $verifyAddress) && array_key_exists('country', $verifyAddress) ) { if( $verifyAddress['region'] != "" && $verifyAddress['region'] != "*" && $verifyAddress['postcode'] != "" && $verifyAddress['postcode'] != "*" && $verifyAddress['country'] != "" && $verifyAddress['country'] != "*" ) { $verifyAddress['country'] = ('GB' === $verifyAddress['country']) ? 'UK' : $verifyAddress['country']; if ($this->_isOmxStatedCountry($verifyAddress['country'])) { $verifyAddress['region'] = substr($verifyAddress['region'], 0, 10); } else { $verifyAddress['region'] = ''; } $valid = true; } } return $valid; } private function _isOmxStatedCountry($countryCode) { switch (strtoupper($countryCode)) { case 'AU': case 'BR': case 'CA': case 'CU': case 'IN': case 'MX': case 'US': return true; break; default: return false; break; } return false; } } 