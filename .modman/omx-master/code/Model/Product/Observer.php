<?php
 class Omx_Hooks_Model_Product_Observer { static public function bulkSend () { $settings = Mage::getModel('hooks/settings')->getCollection()->load(); $connector = Mage::getModel('hooks/connector'); $time = $connector->autoProductSendingTime; $lastRun = $connector->lastProductSendingJobTime; $forceRun = $connector->forceProductSending; $executeJob = false; if (!$forceRun && $time != '') { $aTime = explode(':', $time); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $time = Zend_Date::now(); $time->setTimezone('America/New_York')->setHour($aTime[0])->setMinute($aTime[1]); $lastRun = Zend_Date::isDate($lastRun, 'yyyy-MM-dd HH:mm:ss') ? new Zend_Date($lastRun, 'yyyy-MM-dd HH:mm:ss') : null; $executeJob = $time->compare($now) < 1 && ($lastRun === null || $time->isLater($lastRun)); } if ( $forceRun || $executeJob ) { $products = Mage::getModel('catalog/product')->getCollection() ->addAttributeToFilter( array( array('attribute'=>'omx_product_exists', 'neq'=>'1'), array('attribute'=>'omx_product_exists', 'null'=>'null') ), '', 'left' ) ->addAttributeToFilter( array( array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_SIMPLE), array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_VIRTUAL), array('attribute'=>'type_id', 'eq'=>Mage_Downloadable_Model_Product_Type::TYPE_DOWNLOADABLE), array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_CONFIGURABLE) ), '' ); $eligibleProducts = $products->getItems(); $obj = new stdClass(); $obj->errorMessages = ''; $obj->errorCounter = 0; foreach ($eligibleProducts as $product) { $product = $product->load($product->getId()); $configurableModel = Mage::getModel('Mage_Catalog_Model_Product_Type_Configurable'); $parentsIds = $configurableModel->getParentIdsByChild($product->getId()); if ( count($parentsIds) === 0 ) { $exists = $product->getOmxProductExists(); $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::CRON_FUNCTIONS, $obj)); try { if ($exists == null) { $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); $productHelper->setDataFromOmxItem($stringDate); $exists = $product->getOmxProductExists(); } if (!$exists) { $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); if($productHelper->pushDataToOmx(true, $stringDate)) { $productHelper->pushInventoryToOmx(); $productHelper->pushPricesToOmx(); $productHelper->pushCustomizationsToOmx(); $productHelper->pushSubitemsToOmx(); $productHelper->setDataFromOmxItem($stringDate); } } } catch (Exception $e) { if ($e->getCode() === 101) break; } } } $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); if ($obj->errorMessages != '') { $notif = Mage::getModel('hooks/adminNotification'); $notif->create(array( array( 'severity' => Mage_AdminNotification_Model_Inbox::SEVERITY_MINOR, 'date_added' => $stringDate, 'title' => Mage::helper('hooks')->__('An error has occured during the bulk transmition of products to OMX.'), 'description' => $obj->errorMessages, 'url' => '' ) )); } elseif ($forceRun) { $notif = Mage::getModel('hooks/adminNotification'); $notif->create(array( array( 'severity' => Mage_AdminNotification_Model_Inbox::SEVERITY_NOTICE, 'date_added' => $stringDate, 'title' => Mage::helper('hooks')->__('The bulk transmition of products to OMX run successfully.'), 'description' => '', 'url' => '' ) )); } foreach ($settings as $setting) { if ($setting->name === 'lastProductSendingJobTime') { $omx_now = Zend_Date::now(); $omx_now->setTimezone('America/New_York'); $setting->value = $omx_now->toString("yyyy-MM-dd HH:mm:ss"); $setting->save(); } elseif ($setting->name === 'productSendingJobRunCount') { $setting->value = $setting->value == null || $setting->value == "" ? 1 : $setting->value + 1; $setting->save(); } } } if ($forceRun) { foreach ($settings as $setting) { if ($setting->name === 'forceProductSending') { $setting->value = 0; $setting->save(); } } } } }