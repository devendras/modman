<?php
 class Omx_Hooks_Model_Giftcertificate_Observer extends Omx_Hooks_Model_Observer { public function hooksSalesQuoteCollectTotalsBefore(Varien_Event_Observer $observer) { if (Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { $quote = $observer->getEvent()->getQuote(); $quote->setOmxGiftCertificateTotalCollected(false); } } public function hooksSalesQuoteRemoveItem(Varien_Event_Observer $observer) { if (Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { $quote = $observer->getQuoteItem()->getQuote(); if ($quote->getItemsCount() == 1) { Mage::helper('hooks/giftcertificate')->unsetCertificates($quote); } } } public function hooksSalesQuotePaymentImportDataBefore(Varien_Event_Observer $observer) { return $this; } public function hooksCheckoutTypeMultishippingCreateOrdersSingle(Varien_Event_Observer $observer) { $order = $observer->getOrder(); if(Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { $address = $observer->getAddress(); $order->setBaseOmxGiftCertificatesAmountUsed( $address->getBaseOmxGiftCertificatesAmountUsed() ); $order->setOmxGiftCertificatesAmountUsed( $order->getStore()->convertPrice( $address->getBaseOmxGiftCertificatesAmountUsed()) ); Mage::helper('hooks/giftcertificate') ->setCertificates( $order, Mage::helper('hooks/giftcertificate')->getCertificates($order->getQuote()) ); } $order->save(); } public function hooksSalesConvertQuoteToOrder(Varien_Event_Observer $observer) { $quote = $observer->getEvent()->getQuote(); $order = $observer->getEvent()->getOrder(); if (Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { if($quote->getIsMultiShipping() == 0 || $quote->getIsMultiShipping() == false) { $quoteShippingAddresses = $observer->getQuote()->getShippingAddress(); $order->setBaseOmxGiftCertificatesAmountUsed( $quoteShippingAddresses->getBaseOmxGiftCertificatesAmountUsed() ); $order->setOmxGiftCertificatesAmountUsed( $order->getStore()->convertPrice($quoteShippingAddresses->getBaseOmxGiftCertificatesAmountUsed()) ); Mage::helper('hooks/giftcertificate') ->setCertificates( $order, Mage::helper('hooks/giftcertificate')->getCertificates($quote) ); } $order->setOmxOrderKeycode( $quote->getOmxOrderKeycode() ); } return $this; } public function hooksPaypalPrepareLineItems(Varien_Event_Observer $observer) { if (Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { $paypalCart = $observer->getEvent()->getPaypalCart(); if ($paypalCart) { $salesEntity = $paypalCart->getSalesEntity(); $value = abs($salesEntity->getBaseOmxGiftCertificatesAmountUsed()); if ($value > 0.0001) { $paypalCart->updateTotal(Mage_Paypal_Model_Cart::TOTAL_DISCOUNT, $value, Mage::helper('hooks/data')->__('Gift Certificate (%s)', Mage::app()->getStore()->convertPrice($value, true, false)) ); } } } } public function hooksGoogleCheckoutDiscountItemPrice(Varien_Event_Observer $observer) { if (Mage::helper('hooks')->getSettings('useOmxGiftCertificates') == 1 ) { $quote = $observer->getEvent()->getQuote(); if($quote->getBaseOmxGiftCertificatesAmountUsed() > 0) { $discountItem = $observer->getEvent()->getDiscountItem(); $discountItem->setPrice($discountItem->getPrice() - $quote->getBaseOmxGiftCertificatesAmountUsed()); $discountItem->setDescription('Amount paid with gift certificate. '); } } return $this; } public function hooksAdminSystemConfigChangedSectionAdvanced(Varien_Event_Observer $observer) { if( !Mage::helper('hooks/giftcertificate')->canUseGiftcertificates() && Mage::helper('hooks/data')->getSettings('useOmxGiftCertificates') == 1 ) { try { Mage::helper('hooks/data')->setSettings('useOmxGiftCertificates', '0'); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); Mage::getModel('hooks/adminNotification')->create( array( array( 'severity' => Mage_AdminNotification_Model_Inbox::SEVERITY_MAJOR, 'date_added' => $now->toString("yyyy-MM-dd HH:mm:ss"), 'title' => 'OMX Giftcertificates disabled.', 'description' => 'A mismatch with the Magento settings has been detected. To use OMX Giftcertificates the GiftCardAccount module must be enabled.', 'url' => '' ) ) ); Mage::helper('hooks/data')->log( null, null, 'OMXGIFTCERT: OMX Giftcertificates disabled: A mismatch with the Magento settings has been detected. To use OMX Giftcertificates the GiftCardAccount module must be enabled.' ); } catch (Exception $e) { Mage::helper('hooks/data')->log( null, $e->getMessage(), 'OMXGIFTCERT: Giftcertificates settings mismatch - failed to disable OMX Giftcertificates' ); } } } }