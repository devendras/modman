<?php  class Omx_Hooks_Model_Giftcertificate_Certificate extends Mage_Core_Model_Abstract { private $_certCode; private $_certId; public $certCode; public $certBalance; public $certExpiryDate; public $certValid; public $error; public function __construct($certCode = NULL) { $this->_certCode = $certCode; } public function loadDetails() { $connector = Mage::getModel('hooks/connector'); if(!$this->_certCode) { $this->error = 'No Gift Cerftificate Code provided'; $this->certValid = false; return true; } if($connector->isConfigured()) { $xmlObject = $xmlObject = Mage::getModel('hooks/xml_giftcertificate_information_request', $this->_certCode); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Giftcertificate_Information_Request) { $credentials = array( 'xml' => $xmlObject, ); $responseXml = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_GCIR, $credentials); } if ($responseXml instanceof DOMDocument) { $success = (int)$responseXml->getElementsByTagName('Success')->item(0)->nodeValue; $this->certCode =$this->_certCode; if ($success == 1) { $this->certBalance = (float)$responseXml->getElementsByTagName('Balance')->item(0)->nodeValue; $status = ($responseXml->getElementsByTagName('Status')->item(0)->nodeValue == 'Active') ? true : false; $this->certExpiryDate = $responseXml->getElementsByTagName('ExpiryDate')->item(0)->nodeValue; $expires = ($this->certExpiryDate != '') ? true : false; $this->_certId = $responseXml->getElementsByTagName('GiftCertificate')->item(0)->getAttribute('id'); if($this->certBalance > 0) { if($status && $expires && $this->certExpiryDate != '') { $nowDate = Zend_Date::now(); $nowDate->setTimezone('America/New_York'); $compareDate = new Zend_Date($this->certExpiryDate); $this->certValid = ($nowDate->isEarlier($compareDate) || $compareDate->isToday()); } elseif ($status && !$expires) { $this->certValid = true; } else { $this->certValid = false; } } } else { $error = $responseXml->getElementsByTagName('Error')->item(0)->nodeValue; if ($error == 'The provided GiftCertificateCode does not exist.') { $this->error = 'The provided Gift Certificate Code does not exist'; $this->certValid = false; } } return true; } else { $this->error = 'Connection error'; return false; } } } public function addToCart($gcCode = NULL, $saveQuote = true, $quote = NULL) { if($gcCode) { $this->_certCode = $gcCode; } $loadSuccess = $this->loadDetails(); if(!$loadSuccess) { Mage::throwException(Mage::helper('hooks')->__('Connection error - please try again later.')); } elseif (!$this->certValid) { Mage::throwException(Mage::helper('hooks')->__('The Certificate "%s" is not valid.', $this->_certCode)); } else { if (is_null($quote)) { $quote = $this->_getCheckoutSession()->getQuote(); } $mageCards = Mage::helper('enterprise_giftcardaccount')->getCards($quote); if (count($mageCards)) { $logData['comment'] = "Omx certificate not added - Magento Gift card was found in quote #".$quote->getEntityId(); Mage::helper('hooks')->log($logData); Mage::throwException(Mage::helper('hooks')->__('Error adding Gift Certificate.')); } $cards = Mage::helper('hooks/giftcertificate')->getCertificates($quote); if (count($cards)) { Mage::throwException(Mage::helper('hooks')->__('Only one Gift Certificate can be used per order.')); } $cards[]=array( 'id' =>$this->_certId, 'code' => $this->_certCode, 'base_balance' => $this->certBalance, ); Mage::helper('hooks/giftcertificate')->setCertificates($quote, $cards); if ($saveQuote) { $quote->save(); } return $this; } } public function unsetCartCertificates($saveQuote = true, Mage_Sales_Model_Quote $quote = NULL) { if (is_null($quote)) { $quote = $this->_getCheckoutSession()->getQuote(); } Mage::helper('hooks/giftcertificate')->unsetCertificates($quote); if ($saveQuote) { $quote->save(); } return $this; } protected function _getCheckoutSession() { return Mage::getSingleton('checkout/session'); } } 