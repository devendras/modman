<?php
 class Omx_Hooks_Model_Connector extends Varien_Object { public $connectorEnabled; public $debugMode; public $udiAuthToken; public $udiUrl; public $omxVersion; public $storeCode; public $defaultKeycode; public $callType; public $forceMagentoPrices; public $refreshInventory; public $continuityCustomOptionName; public $autoCreateCoupons; public $data = array(); public $connectorInfo; public $magentoVersion; public $clientInfo; public $agentValue; public $shippingMethodNonShippable; public $autoProductSendingTime; const OMXCONNECTION_MAX_OFF_TIME = 5; const CALL_TYPE_IIR = "IIR100"; const CALL_TYPE_UDOA = "UDOA200"; const CALL_TYPE_TEST = "TEST"; const CALL_TYPE_TIMEOUT = "TIMEOUT"; const CALL_TYPE_OIR = 'OIR200'; const CALL_TYPE_CUHR = 'CUHR200'; const CALL_TYPE_OCR = 'OCR100'; const CALL_TYPE_OWDUR = 'OWDUR100'; const CALL_TYPE_ItIR = 'ItIR100'; const CALL_TYPE_ItUR = 'ItUR200'; const CALL_TYPE_IPUR = 'IPUR100'; const CALL_TYPE_ICUR = 'ICUR200'; const CALL_TYPE_ODUR = 'ODUR100'; const CALL_TYPE_IUR = 'IUR300'; const CALL_TYPE_SItUR = 'SItUR100'; const CALL_TYPE_GCIR = 'GCIR100'; const CALL_TYPE_OPR = 'OPR100'; public function _construct() { $settings = Mage::getModel('hooks/settings')->getCollection(); $connectorEntry = $settings->getItemsByColumnValue ('name', 'connectorEnabled'); $this->connectorEnabled = $connectorEntry[0]->value; $debugEntry = $settings->getItemsByColumnValue ('name', 'debugMode'); $this->debugMode = $debugEntry[0]->value; $udiAuthTokenEntry = $settings->getItemsByColumnValue ('name', 'udiAuthToken'); $this->udiAuthToken = $udiAuthTokenEntry[0]->value; $udiUrlEntry = $settings->getItemsByColumnValue('name', 'udiUrl'); $this->udiUrl = $udiUrlEntry[0]->value; $omxVersionEntry = $settings->getItemsByColumnValue('name', 'omxVersion'); $this->omxVersion = $omxVersionEntry[0]->value; $storeCodeEntry = $settings->getItemsByColumnValue('name', 'storeCode'); $this->storeCode = $storeCodeEntry[0]->value; $defaultKeycodeEntry = $settings->getItemsByColumnValue('name', 'defaultKeycode'); $this->defaultKeycode = $defaultKeycodeEntry[0]->value; $additionalParamsEntry = $settings->getItemsByColumnValue('name', 'additionalParams'); $this->additionalParams = $additionalParamsEntry[0]->value; $forceMagentoPricesEntry = $settings->getItemsByColumnValue('name', 'forceMagentoPrices'); $this->forceMagentoPrices = $forceMagentoPricesEntry[0]->value; $refreshInventoryEntry = $settings->getItemsByColumnValue('name', 'refreshInventory'); $this->refreshInventory = $refreshInventoryEntry[0]->value; $continuityCustomOptionNameEntry = $settings->getItemsByColumnValue('name', 'continuityCustomOptionName'); $this->continuityCustomOptionName = $continuityCustomOptionNameEntry[0]->value; $autoCreateCouponsEntry = $settings->getItemsByColumnValue('name', 'autoCreateCoupons'); $this->autoCreateCoupons = $autoCreateCouponsEntry[0]->value; $this->magentoVersion = ' Magento v'.Mage::getVersion().' '; $this->connectorInfo = 'Magento OMX Connector v' . $this->omxVersion . ' '; $this->clientInfo = 'ffcc7eojlf'; $this->agentValue = $this->magentoVersion.$this->connectorInfo . $this->clientInfo; $shippingMethodNonShippableEntry = $settings->getItemsByColumnValue('name', 'shippingMethodNonShippable'); $this->shippingMethodNonShippable = $shippingMethodNonShippableEntry[0]->value; $autoProductSendingTimeEntry = $settings->getItemsByColumnValue('name', 'autoProductSendingTime'); $this->autoProductSendingTime = $autoProductSendingTimeEntry[0]->value; $lastProductSendingJobTimeEntry = $settings->getItemsByColumnValue('name', 'lastProductSendingJobTime'); $this->lastProductSendingJobTime = $lastProductSendingJobTimeEntry[0]->value; $forceProductSendingEntry = $settings->getItemsByColumnValue('name', 'forceProductSending'); $this->forceProductSending = $forceProductSendingEntry[0]->value; } public function isConfigured ($force = false, $data = array()) { $configured = Mage::helper('hooks/data')->getSettings('connectorConfigured'); if ($force || $configured == 0 ) { $result = $this->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_TEST, $data); $resultString = ($result) ? '1' : '0'; try { Mage::helper('hooks/data')->setSettings('connectorConfigured', $resultString); } catch (Exception $e) { Mage::helper('hooks/data')->log(null, null, 'Error saving settings'); } return $result; } else { return ($configured == 1) ? true : false; } } public function callOmx ($callType, $data) { $this->callType = $callType; $this->data = $data; $path = $this->constructPath ($data); if ($path) { $client = $this->prepareClient ($path); $preRequest = $this->preRequest($client); if ($preRequest) { $response = $this->makeRequest ($client); if ($response instanceof Zend_Http_Response) { $returnValue = $this->processResponse ($response); $this->data = array (); $this->callType = ''; return $returnValue; } else { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $response, $this->callType.': Response is not Zend_Http_Response object' ); $this->data = array (); $this->callType = ''; } } } return false; } protected function constructPath (array $data) { $path = (array_key_exists('udiUrl', $data)) ? $data['udiUrl'] : $this->udiUrl; $developerMode = Mage::getIsDeveloperMode(); $http = substr($path, 0, 7) === 'http://'; $https = substr($path, 0, 8) === 'https://'; if (($developerMode && $http) || $https){ switch ($this->callType) { case self::CALL_TYPE_UDOA : case self::CALL_TYPE_IIR : case self::CALL_TYPE_TEST : case self::CALL_TYPE_TIMEOUT : case self::CALL_TYPE_OCR : case self::CALL_TYPE_ItIR : case self::CALL_TYPE_ItUR : case self::CALL_TYPE_IPUR : case self::CALL_TYPE_ODUR : case self::CALL_TYPE_IUR : case self::CALL_TYPE_SItUR : case self::CALL_TYPE_GCIR : $path .= '/hdde/xml/udi.asp?'; break; case self::CALL_TYPE_CUHR : case self::CALL_TYPE_OIR : case self::CALL_TYPE_OWDUR : case self::CALL_TYPE_ICUR : case self::CALL_TYPE_OPR : $path .= '/OM2/udi.ashx?'; break; default: break; } $udiAuthToken = (array_key_exists('udiAuthToken', $data)) ? $data['udiAuthToken'] : $this->udiAuthToken; $parameters = array( 'UDIAuthToken' => $udiAuthToken ); switch ($this->callType) { case self::CALL_TYPE_UDOA : $parameters['RequestType'] = 'UDOARequest'; $parameters['RequestVersion'] = '2.00'; break; case self::CALL_TYPE_IIR : $parameters['RequestType'] = 'InventoryInformationRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_TEST : $parameters['RequestType'] = 'UDOARequest'; $parameters['RequestVersion'] = '2.00'; $parameters['Wrapper'] = 1; break; case self::CALL_TYPE_TIMEOUT : $parameters['RequestType'] = 'PointlessWaitRequest'; $parameters['RequestVersion'] = '1.00'; $parameters['Wrapper'] = 1; $parameters['WaitTime'] = 10000000; break; case self::CALL_TYPE_OIR : $parameters['RequestType'] = 'OrderInformationRequest'; $parameters['RequestVersion'] = '2.00'; break; case self::CALL_TYPE_CUHR : $parameters['RequestType'] = 'CustomerHistoryRequest'; $parameters['RequestVersion'] = '2.00'; break; case self::CALL_TYPE_OCR : $parameters['RequestType'] = 'OrderCancellationRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_OWDUR : $parameters['RequestType'] = 'OrderWaitDateUpdateRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_ItIR : $parameters['RequestType'] = 'ItemInformationRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_ItUR : $parameters['RequestType'] = 'ItemUpdateRequest'; $parameters['RequestVersion'] = '2.00'; break; case self::CALL_TYPE_IPUR : $parameters['RequestType'] = 'ItemPriceUpdateRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_ICUR : $parameters['RequestType'] = 'ItemCustomizationUpdateRequest'; $parameters['RequestVersion'] = '2.00'; break; case self::CALL_TYPE_ODUR : $parameters['RequestType'] = 'OrderDetailUpdateRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_IUR : $parameters['RequestType'] = 'InventoryUpdateRequest'; $parameters['RequestVersion'] = '3.00'; break; case self::CALL_TYPE_SItUR : $parameters['RequestType'] = 'SubItemUpdateRequest'; $parameters['RequestVersion'] = '1.00'; break; case self::CALL_TYPE_GCIR: $parameters['RequestType'] = 'GiftCertificateInformationRequest'; $parameters['RequestVersion'] = '1.00'; break; default: break; } foreach( $parameters as $key =>$value ){ $path .= $key . "=" . $value ."&"; } $path = substr( $path, 0, -1); if ($this->extraParams) { $path .= "&". $this->extraParams; } return $path; } else { return false; } } protected function prepareClient ($path) { $client = new Zend_Http_Client(); $client->setUri($path); $client->setConfig(array( 'maxredirects' => 0, 'timeout' => 60)); $client->setHeaders('User-Agent', $this->agentValue); return $client; } protected function preRequest (Zend_Http_Client $client) { switch ($this->callType) { case self::CALL_TYPE_UDOA : $newEntryData = $this->data; $newEntryData['xml_string'] = $newEntryData['xml']->getEncodedXmlString(); unset($newEntryData['xml']); $model = Mage::getModel('hooks/data')->setData($newEntryData); try { $model->save(); $this->data['omx_id'] = $model->getOmxId(); return true; } catch (Exception $e) { Mage::getSingleton('adminhtml/session')->addError($e->getMessage()); return false; } break; case self::CALL_TYPE_IIR : case self::CALL_TYPE_TEST : case self::CALL_TYPE_TIMEOUT : case self::CALL_TYPE_OIR: case self::CALL_TYPE_CUHR : case self::CALL_TYPE_OCR : case self::CALL_TYPE_OWDUR: case self::CALL_TYPE_ItIR : case self::CALL_TYPE_ItUR : case self::CALL_TYPE_IPUR : case self::CALL_TYPE_ICUR : case self::CALL_TYPE_ODUR : case self::CALL_TYPE_IUR : case self::CALL_TYPE_SItUR : case self::CALL_TYPE_GCIR : case self::CALL_TYPE_OPR : return true; break; default: return false; break; } } protected function makeRequest (Zend_Http_Client $client) { switch ($this->callType) { case self::CALL_TYPE_UDOA : case self::CALL_TYPE_IIR : case self::CALL_TYPE_OIR : case self::CALL_TYPE_CUHR : case self::CALL_TYPE_OCR : case self::CALL_TYPE_OWDUR: case self::CALL_TYPE_ItIR : case self::CALL_TYPE_ItUR : case self::CALL_TYPE_IPUR : case self::CALL_TYPE_ICUR : case self::CALL_TYPE_ODUR : case self::CALL_TYPE_IUR : case self::CALL_TYPE_SItUR : case self::CALL_TYPE_GCIR : case self::CALL_TYPE_OPR : try { $response = $client->setRawData($this->data['xml']->getXmlString(), 'text/xml')->request('POST'); } catch (Exception $e) { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $e->__toString(), $this->callType.': '.$e->getMessage() ); $this->_logConnectionSuccess(false); return false; } break; case self::CALL_TYPE_TEST : try { $response = $client->request('GET'); } catch (Exception $e) { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $e->__toString(), 'TEST: '.$e->getMessage() ); $this->_logConnectionSuccess(false); return false; } break; case self::CALL_TYPE_TIMEOUT : try { $response = $client->request('GET'); } catch (Exception $e){ Mage::helper('hook/data')->log( $this->getRequestXmlString(), $e->__toString(), 'TIMEOUT: '.$e->getMessage() ); $this->_logConnectionSuccess(false); return false; } break; default: break; } return $response; } protected function processResponse (Zend_Http_Response $response) { $responseBody = $response->getRawBody(); $responseXml = new DOMDocument('1.0'); $responseXml->formatOutput = true; try { $responseXml->loadXML($response->getRawBody()); } catch (Exception $e) { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $response->getRawBody(), $this->callType.': The XML cannot be loaded' ); return false; } $errorElements = $responseXml->getElementsByTagName('Error'); if ($errorElements->length >=1 ) { foreach($errorElements as $errorElement) { $errorString = strtolower($errorElement->nodeValue); if (strstr($errorString, "not authorized") && strstr($errorString, "token") ) { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $response->getRawBody(), $this->callType.': Call was rejected due to missing UDI permission' ); $this->_logConnectionSuccess(true); return false; } } } if ($response->getStatus() != '200' ){ $callsToProcess500 = array(self::CALL_TYPE_UDOA,); Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $response, $this->callType.': Header Status: '.$response->getStatus() ); $connenctionSuccess = false; if (!in_array($this->callType, $callsToProcess500)) { return false; } } else { $connenctionSuccess = true; } $this->_logConnectionSuccess($connenctionSuccess); if ($this->debugMode && $response->getStatus() == '200') { Mage::helper('hooks/data')->log( $this->getRequestXmlString(), $response->getBody(), $this->callType.': Call OK. Debug mode is enabled' ); } $returnValue = NULL; switch ($this->callType) { case self::CALL_TYPE_UDOA : $returnValue = $this->processResponseUDOA($responseXml, $response); break; case self::CALL_TYPE_IIR : $returnValue = $this->processResponseIIR($responseXml, $response); break; case self::CALL_TYPE_TEST : $returnValue = $this->processResponseTEST($responseXml); break; case self::CALL_TYPE_TIMEOUT : break; case self::CALL_TYPE_OIR : $returnValue = $responseXml; break; case self::CALL_TYPE_CUHR : $returnValue = $responseXml; break; case self::CALL_TYPE_OCR : $returnValue = $this->processResponseOCR($responseXml); break; case self::CALL_TYPE_OWDUR : $returnValue = $this->processResponseOWDUR($responseXml); break; case self::CALL_TYPE_ItIR : $returnValue = $responseXml; break; case self::CALL_TYPE_ItUR : $returnValue = $responseXml; break; case self::CALL_TYPE_IPUR : $returnValue = $responseXml; break; case self::CALL_TYPE_ICUR : $returnValue = $responseXml; break; case self::CALL_TYPE_ODUR : $returnValue = $this->processResponseODUR($responseXml); break; case self::CALL_TYPE_IUR : $returnValue = $this->processResponseIUR($responseXml); break; case self::CALL_TYPE_SItUR : $returnValue = $responseXml; break; case self::CALL_TYPE_GCIR : $returnValue = $responseXml; break; case self::CALL_TYPE_OPR : $returnValue = $this->processResponseOPR($responseXml); break; } return $returnValue; } protected function processResponseIIR($xml, $response) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue == '1') { return $xml->getElementsByTagName ('Available')->item(0)->nodeValue; } if ($successElements->length && $successElements->item(0)->nodeValue == '0') { return false; } if (!$successElements->length) { return false; } } protected function processResponseUDOA(DOMDocument $xml, Zend_Http_Response $response) { $success = 0; $omxEntry = Mage::getModel('hooks/data') ->getCollection() ->addFilter('omx_id', $this->data['omx_id']) ->getFirstItem(); $isResubmit = $omxEntry->getResubmited(); if ($response->getStatus() == '200') { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length) { if ($successElements->item(0)->nodeValue){ $omxOrderElement = $xml->getElementsByTagName('OrderNumber'); $success = 1; if ($omxOrderElement->length) { $success = $omxOrderElement->item(0)->nodeValue; } $customerElements = $xml->getElementsByTagName('Customer'); if ($customerElements->length) { $customerElement = $customerElements->item(0); if ($customerElement->hasAttribute('customerNumber')){ $omxCustomerNumber = $customerElement->getAttributeNode('customerNumber')->value; $orderId = $xml->getElementsByTagName('OrderID')->item(0)->nodeValue; $order = Mage::getModel('sales/order')->loadByIncrementId($orderId); if ($success > 1) { $order->setOmxOrderId($success); $order->getResource()->saveAttribute($order, "omx_order_id"); $customerId = $order->getCustomerId(); if ($customerId !== NULL) { $customer = Mage::getModel('customer/customer')->load($customerId); $customer->setOmxCustomerNumber($omxCustomerNumber); $customer->getResource()->saveAttribute($customer, "omx_customer_number"); } } } } } } if ($this->debugMode){ $omxEntry->setResponse(Mage::helper('core')->encrypt($response->getBody())); } else { $omxEntry->setXmlString(''); $omxEntry->setResponse(''); if ($isResubmit){ $siblings = $omxEntry->getSiblings(); if ($siblings instanceof Omx_Hooks_Model_Mysql4_Data_Collection) { foreach ($siblings as $sibling){ try { $sibling ->setResponse('') ->save(); } catch (Exception $e) { Mage::getSingleton('adminhtml/session')->addError($e->getMessage()); } } } } } if ($isResubmit){ $newEntryData = array( 'omx_id' => null, 'parent_id' => $omxEntry->getOmxId(), 'order_id' => $omxEntry->getOrderId() ); if ($this->debugMode) { $newEntryData['response'] = Mage::helper('core')->encrypt($response->getBody()); } } } else { if ($isResubmit) { $newEntryData = array( 'omx_id' => null, 'parent_id' => $omxEntry->getOmxId(), 'order_id' => $omxEntry->getOrderId() ); $newEntryData['response'] = Mage::helper('core')->encrypt($response->getBody()); $newEntryData['status'] = $success; } $omxEntry->setResponse(Mage::helper('core')->encrypt($response->getBody())); } if ($isResubmit){ $omxEntry->setResubmited($omxEntry->getResubmited() + 1); $newEntry = Mage::getModel('hooks/data')->setData($newEntryData); try { $newEntry->save(); } catch (Exception $e) { Mage::getSingleton('adminhtml/session')->addError($e->getMessage()); } } $omxEntry->setStatus($success); $omx_now = Zend_Date::now(); $omx_now->setTimezone('America/New_York'); $omxEntry->setTimestamp($omx_now->toString("yyyy-MM-dd HH:mm:ss")); $xmlXPath = new DOMXPath($xml); $verifyFlag = 'False'; $verifyFlag = $xmlXPath ->query("/UDOAResponse/UDOARequest/UDIParameter/Parameter[@key='VerifyFlag']") ->item(0); if($verifyFlag instanceof DOMElement) { $verifyFlag = $verifyFlag->nodeValue; } if($verifyFlag != 'True') { try { $omxEntry->save(); } catch (Exception $e) { Mage::getSingleton('adminhtml/session')->addError($e->getMessage()); } return $success; } else { return $xml; } } protected function processResponseTEST(DOMDocument $xml) { $lookFor = 'The Order Detail tag cannot be found.'; $errorData = $xml->getElementsByTagName('Error'); if ($errorData->length) { foreach ($errorData as $error) { if ($error->nodeValue === $lookFor) { return true; } } } else { return false; } } protected function processResponseOCR($xml) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue== '1') { return true; } if ($successElements->length && $successElements->item(0)->nodeValue == '0') { $errorData = $xml->getElementsByTagName ('Error'); $errors = array(); foreach ($errorData as $error) { $errors[] = $error->nodeValue; } return $errors; } if (!$successElements->length) { return false; } } protected function processResponseOWDUR($xml) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue == '1'){ return true; } if ($successElements->length && $successElements->item(0)->nodeValue == '0' ){ $errorData = $xml->getElementsByTagName ('Error'); $errors = array(); foreach ($errorData as $error) { $errors[] = $error->nodeValue; } return $errors; } if (!$successElements->length) { return false; } } protected function processResponseODUR($xml) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue = '1') { return true; } if ($successElements->length && $successElements->item(0)->nodeValue = '0') $errorData = $xml->getElementsByTagName ('Error'); $errors = array(); foreach ($errorData as $error) { $errors[] = $error->nodeValue; } return $errors; if ($successElements->length) { return false; } } protected function processResponseIUR($xml) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue == '1') { return true; } if ($successElements->length && $successElements->item(0)->nodeValue == '0') { $errorData = $xml->getElementsByTagName ('Error'); $errors = array(); foreach ($errorData as $error) { $errors[] = $error->nodeValue; } return $errors; } if (!$successElements->length) { return false; } } protected function processResponseOPR($xml) { $successElements = $xml->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue == '1') { return $xml; } if ($successElements->length && $successElements->item(0)->nodeValue == '0') { $errorData = $xml->getElementsByTagName ('Error'); $errors = array(); foreach ($errorData as $error) { $errors[] = $error->nodeValue; } return $errors; } if (!$successElements->length) { return false; } } protected function getRequestXmlString() { return (array_key_exists('xml',$this->data)) ? $this->data['xml']->getXmlString() : 'Don\'t have an XML string'; } public function getCurrentConnectionState() { $connectionObject = $this->_loadConnectionCache(); if ($connectionObject->currentState['connection'] == false) { $lastChange = $connectionObject->currentState['changed_at']; if ($lastChange instanceof Zend_Date) { $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $now->sub($lastChange); $timeDiff = $now->get(Zend_Date::TIMESTAMP) / 60; if ($timeDiff >= self::OMXCONNECTION_MAX_OFF_TIME) { $this->_switchConnectionState(true, $connectionObject); } } } return $connectionObject->currentState['connection']; } private function _logConnectionSuccess($callSuccess) { $max_entries = 10; $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $connectionObject = $this->_loadConnectionCache(); if(sizeof( $connectionObject->callHistory)) { array_unshift( $connectionObject->callHistory, $callSuccess ); } else { $connectionObject->callHistory[0] = $callSuccess; } while (sizeof($connectionObject->callHistory) > $max_entries) { array_pop($connectionObject->callHistory); } if ($callSuccess && $connectionObject->currentState['connection']==false) { $this->_switchConnectionState( true, $connectionObject, false ); } if ( !$callSuccess && $connectionObject->currentState['connection'] == true && sizeof($connectionObject->callHistory) >=3 ) { $count = 0; for ($i=0; $i<3; $i++) { $count = ($connectionObject->callHistory[$i] == false)? $count+1 : $count; } if ($count == 3) { $this->_switchConnectionState( false, $connectionObject, false ); } } Mage::app()->saveCache( serialize($connectionObject), 'omx_current_connection' ); return $connectionObject->currentState['connection']; } private function _loadConnectionCache() { $connectionObject = Mage::app()->loadCache('omx_current_connection'); if ($connectionObject == false) { $connectionObject = new stdClass(); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $connectionObject->currentState = array( 'connection' => true, 'changed_at'=> $now ); $connectionObject->callHistory = array(); Mage::app()->saveCache( serialize($connectionObject), 'omx_current_connection' ); } else { $connectionObject = unserialize($connectionObject); } return $connectionObject; } private function _switchConnectionState($newState, &$connectionObject = null, $save=true) { if ($connectionObject == null) { $connectionObject = $this->_loadConnectionCache(); } $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $connectionObject->currentState = array( 'connection' => $newState, 'changed_at'=> $now ); $newStateString = ($newState==true) ? 'TRUE' : 'FALSE'; Mage::helper('hooks/data')->log( serialize($connectionObject), null, 'CONNECTION STATE: Current connection state set to '.$newStateString ); if($save) { Mage::app()->saveCache( serialize($connectionObject), 'omx_current_connection' ); } } } 