<?php
 class Omx_Hooks_Model_Omxpricing_Observer extends Omx_Hooks_Model_Observer { public function hooksSalesQuoteCollectTotalsBefore(Varien_Event_Observer $observer) { $currentConnectionState = Mage::getModel('hooks/connector')->getCurrentConnectionState(); $quote = $observer->getQuote(); if($quote->getIsMultiShipping() == false || $quote->getIsMultiShipping() == 0) { if (Mage::helper('hooks/data')->getSettings('useOmxTaxCalculation') == 1) { $omxTaxUsed =$quote->getOmxTaxUsed(); if($currentConnectionState) { if ($omxTaxUsed === '0') { $errorMessageText = mage::helper('hooks/data')->getSettings('omxTaxOmxFallbackMessage'); if (mb_strtolower(trim($errorMessageText)) != 'none') { if($errorMessageText == '') { $errorMessageText = Mage::helper('hooks/data') ->__('The system has changed the tax estimation sytem to online mode. Tax values might differ from previous displays.'); } Mage::getSingleton('checkout/session')->addWarning(Mage::helper('hooks/data')->__($errorMessageText)); } } Mage::getConfig()->setNode('global/sales/quote/totals/tax/class', 'omx_hooks_model_omxpricing_sales_quote_address_total_tax'); $quote->setOmxTaxUsed(1); } else { if ($omxTaxUsed === '1') { $errorMessageText = mage::helper('hooks/data')->getSettings('omxTaxMagentoFallbackMessage'); if (mb_strtolower(trim($errorMessageText)) != 'none') { if($errorMessageText == '') { $errorMessageText = Mage::helper('hooks/data') ->__('The system has changed the tax estimation to offline mode. Tax values might be inaccurate.'); } Mage::getSingleton('checkout/session')->addWarning(Mage::helper('hooks/data')->__($errorMessageText)); } } $quote->setOmxTaxUsed(0); } } } else { $quote->setOmxTaxUsed(0); } } public function hooksAdminSystemConfigChangedSectionTax(Varien_Event_Observer $observer) { if ( !Mage::helper('hooks/omxpricing')->canUseOmxTax() && Mage::helper('hooks/data')->getSettings('useOmxTaxCalculation') == 1 ) { try { Mage::helper('hooks/data')->setSettings('useOmxTaxCalculation', '0'); Mage::helper('hooks/data')->setSettings('useOmxMarketingPolicies', '0'); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); Mage::getModel('hooks/adminNotification')->create( array( array( 'severity' => Mage_AdminNotification_Model_Inbox::SEVERITY_MAJOR, 'date_added' => $now->toString("yyyy-MM-dd HH:mm:ss"), 'title' => 'OMX Tax Calculation disabled.', 'description' => 'A mismatch with the Magento settings has been detected. To use OMX Tax Calculation Magento must be configured to exlcude taxes in catalog- <i>and</i> shipping-prices.', 'url' => '' ) ) ); Mage::helper('hooks/data')->log( null, null, 'OMXPRICING: OMX Tax Calculation disabled: A mismatch with the Magento settings has been detected. To use OMX Tax Calculation To use OMX Tax Calculation Magento must be configured to exlcude taxes in catalog- and shipping-prices.' ); } catch (Exception $e) { Mage::helper('hooks/data')->log( null, $e->getMessage(), 'OMXPRICING: Tax settings mismatch - failed to disable OMX Tax Calculation' ); } } } public function hooksSalesConvertQuoteToOrder(Varien_Event_Observer $observer) { $quote = $observer->getEvent()->getQuote(); $order = $observer->getEvent()->getOrder(); if (Mage::helper('hooks/data')->getSettings('useOmxTaxCalculation') == 1 ) { $order->setOmxTaxUsed( $quote->getOmxTaxUsed() ); } if (Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == 1) { $discounts = Mage::helper('hooks/omxpricing')->getDiscounts($quote); Mage::helper('hooks/omxpricing')->setDiscounts($order, $discounts); } return $this; } public function hooksCheckoutQuoteDestroy(Varien_Event_Observer $observer) { if (Mage::helper('hooks/data')->getSettings('useOmxTaxCalculation') == 1) { $omxSessionData = Mage::getSingleton("core/session")->getData("omx"); unset($omxSessionData['pricingBaseData']); unset($omxSessionData[ 'pricingCalculator']); Mage::getSingleton("core/session")->setData("omx", $omxSessionData); } } public function hooksControllerActionPredispatch(Varien_Event_Observer $observer) { $quote = Mage::getSingleton('checkout/session')->getQuote(); $requestString = $observer->getControllerAction()->getRequest()->getRequestString(); if(substr($requestString, 0, 24) != "/checkout/multishipping/" && ($quote->getIsMultiShipping() == 1 || $quote->getIsMultiShipping() == true) ) { $quote->setIsMultiShipping(0); $quote->save(); } if (Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == 1 && ($quote->getIsMultiShipping() == 0 || $quote->getIsMultiShipping() == false) ) { $freeItems = array(); Mage::getConfig()->setNode('global/sales/quote/totals/omxdiscount/class', 'hooks/omxpricing_sales_quote_address_total_omxdiscount'); Mage::getConfig()->setNode('global/sales/quote/totals/omxdiscount/after', 'tax, discount, grand_total'); Mage::getConfig()->setNode('global/sales/quote/totals/omxdiscount/renderer', 'hooks/omxpricing_checkout_cart_total'); Mage::getConfig()->setNode('global/sales/order_invoice/totals/omxdiscount/class' , 'hooks/omxpricing_sales_order_invoice_total_omxdiscount'); $useOmxDiscountCollector = true; if (Mage::app()->useCache('config')) { $this->_validateSortedTotalCollectorsCash(true); } $canSelect = false; if($quote instanceof Mage_Sales_Model_Quote) { if($quote->getOmxTriggerPriceCalc() == 1) { $quote->setOmxTriggerPriceCalc(0); $quote->collectTotals(); } $freeItems = Mage::Helper('hooks/omxpricing')->getDiscounts( $quote, Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS ); $canSelect = (array_key_exists('canSelect', $freeItems)) ? $freeItems['canSelect'] : $canSelect; } if($canSelect) { Mage::getConfig()->setNode('global/blocks/checkout/rewrite/onepage', 'Omx_Hooks_Block_Omxpricing_Checkout_Onepage'); Mage::getConfig()->setNode('global/blocks/checkout/rewrite/onepage_omxdiscount', 'Omx_Hooks_Block_Omxpricing_Checkout_Onepage_Omxdiscount'); Mage::getConfig()->setNode('global/models/checkout/rewrite/type_onepage' , 'Omx_Hooks_Model_Omxpricing_Checkout_Type_Onepage'); } } else { if (Mage::app()->useCache('config')) { $this->_validateSortedTotalCollectorsCash(false); } if($quote->getId()) { if(Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == 1) { $quoteFreeItemDis = Mage::helper("hooks/omxpricing")->getDiscounts($quote, Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS); $quoteAmountDis = Mage::helper("hooks/omxpricing")->getDiscounts($quote, Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS); if(count($quoteAmountDis) > 0 || count($quoteFreeItemDis) > 0) { Mage::helper("hooks/omxpricing")->setDiscounts($quote, array(), Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS); Mage::helper("hooks/omxpricing")->setDiscounts($quote, array(), Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS); $quote->save(); } } } } } public function hooksPaypalPrepareLineItems(Varien_Event_Observer $observer) { $currentConnectionState = Mage::getModel('hooks/connector')->getCurrentConnectionState(); if ( Mage::helper('hooks')->getSettings('useOmxMarketingPolicies') == 1 && $currentConnectionState ) { $paypalCart = $observer->getEvent()->getPaypalCart(); if ($paypalCart) { $salesEntity = $paypalCart->getSalesEntity(); $valueDiscounts = Mage::helper('hooks/omxpricing')->getDiscounts( $salesEntity, Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS ); $value = 0; $lineDescription = ''; foreach ($valueDiscounts['discountPolicies'] as $discountLine) { $value = abs($discountLine['baseAmount']); if ($value > 0) { $paypalCart->updateTotal( Mage_Paypal_Model_Cart::TOTAL_DISCOUNT, $value ); } } } } } public function hooksGoogleCheckoutDiscountItemPrice(Varien_Event_Observer $observer) { $currentConnectionState = Mage::getModel('hooks/connector')->getCurrentConnectionState(); if ( Mage::helper('hooks')->getSettings('useOmxMarketingPolicies') == 1 && $currentConnectionState ) { $quote = $observer->getEvent()->getQuote(); $discountItem = $observer->getEvent()->getDiscountItem(); $amountDiscounts = Mage::helper('hooks/omxpricing')->getDiscounts($quote, Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS); if(array_key_exists('baseDiscountTotalAmount', $amountDiscounts) && $amountDiscounts['baseDiscountTotalAmount'] > 0 ) { $prefix = ($discountItem->getPrice() == 0) ? '' : $discountItem->getDescription().'; '; $discountItem->setPrice($discountItem->getPrice() - $amountDiscounts['baseDiscountTotalAmount']); $discountItem->setDescription($prefix.'Collected discounts'); } } return $this; } private function _validateSortedTotalCollectorsCash($omxdiscountActive = false) { $cachedTotalCollectors = unserialize(Mage::app()->loadCache('sorted_quote_collectors')); if($cachedTotalCollectors) { $omxDiscountIsListed = (in_array('omxdiscount', $cachedTotalCollectors)) ? true : false; if ($omxdiscountActive && !$omxDiscountIsListed) { Mage::app()->saveCache( null, 'sorted_quote_collectors', array(Mage_Core_Model_Config::CACHE_TAG) ); } if (!$omxdiscountActive && $omxDiscountIsListed) { Mage::app()->saveCache( null, 'sorted_quote_collectors', array(Mage_Core_Model_Config::CACHE_TAG) ); } } } public function hooksControllerFrontInitBefore(Varien_Event_Observer $observer) { if ( Mage::helper('hooks')->getSettings('useOmxMarketingPolicies') == 1 ) { Mage::getConfig()->setNode('frontend/routers/checkout/args/modules/omx_hooks', 'Omx_Hooks'); $configNode = Mage::getConfig()->getNode('frontend/routers/checkout/args/modules/omx_hooks'); if(! $configNode->getAttribute('before')) { $configNode->addAttribute('before', 'Mage_Checkout'); } if($configNode->getAttribute('before') != 'Mage_Checkout'){ $configNode->attributes()->before = 'Mage_Checkout'; } } return $this; } public function hooksSalesQuoteMergeAfter(Varien_Event_Observer $observer) { if (Mage::helper('hooks/data')->getSettings('useOmxMarketingPolicies') == 1) { $quote = $observer->getQuote(); if($quote instanceof Mage_Sales_Model_Quote) { $quote->setOmxTriggerPriceCalc(1); $quote->save(); } } } } 