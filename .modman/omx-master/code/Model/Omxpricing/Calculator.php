<?php
 class Omx_Hooks_Model_Omxpricing_Calculator extends Mage_Core_Model_Abstract { const PRICING_TYPE_TAX = 'tax'; const PRICING_TYPE_DISCOUNT = 'discount'; const PRICING_TYPE_COMPLETE = 'complete'; const OMX_AMOUNT_DISCOUNTS = 'amount'; const OMX_FREE_ITEM_DISCOUNTS = 'free_items'; protected $_quote; public $pricedQuoteId = null; protected $_requestXml; protected $_responseXml; protected $_responseXPath = null; protected $_taxLoaded = false; protected $_discountLoaded = false; public $itemsTax = array(); public $couponTax = array(); public $subtotalTaxAmount = null; public $totalTax = array(); public $omxTaxSettings = array(); public $shippingTax = array(); public $discounts = array(); public $totalDiscountAmount = 0; public $freeItems = array(); public function __construct(Mage_Sales_Model_Quote $quote) { $this->_quote = $quote; } public function getTax($quote = null) { $this->getPricing($quote, self::PRICING_TYPE_TAX); } public function getDiscount($quote = null) { $this->getPricing($quote, self::PRICING_TYPE_DISCOUNT); } public function getPricing($quote = null, $type = self::PRICING_TYPE_COMPLETE){ if ($quote instanceof Mage_Sales_Model_Quote) { $this->_quote = $quote; } $connector = Mage::getModel('hooks/connector'); if($connector->isConfigured()) { $this->_requestXml = null; $this->_responseXml = null; $xmlObject = Mage::getModel( 'hooks/xml_order_pricing_request', array( $this->_quote, self::PRICING_TYPE_COMPLETE ) ); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Order_Pricing_Request) { $credentials = array( 'xml' => $xmlObject, ); $this->_requestXml = $xmlObject->xml; $responseXml = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_OPR, $credentials); } if ($responseXml instanceof DOMDocument) { $this->_responseXml = $responseXml; $this->_parseResult( $responseXml, $type ); } elseif (is_array($responseXml)) { $oprErrors = 'OPR call was unsuccessful and returned the following errors:'; foreach ($responseXml as $error) { $oprErrors .= '\n' . $error; } Mage::throwException($oprErrors); } else { Mage::throwException('Invalid response XML'); } if($type == self::PRICING_TYPE_TAX || $type == self::PRICING_TYPE_COMPLETE) { $this->_taxLoaded = true; } if($type == self::PRICING_TYPE_DISCOUNT || $type == self::PRICING_TYPE_COMPLETE) { $this->_discountLoaded = true; } } } public function getTaxLoaded() { return $this->_taxLoaded; } public function getDiscountLoaded() { return $this->_discountLoaded; } public function getQuoteId() { if ($this->_quote instanceof Mage_Sales_Model_Quote) { return $this->_quote->getId(); } } protected function _parseResult(DOMDocument $xml, $pricingType) { $xmlXpath = new DOMXPath($xml); $this->_responseXPath = $xmlXpath; if ($pricingType == self::PRICING_TYPE_DISCOUNT || $pricingType == self::PRICING_TYPE_COMPLETE ) { $policyElements = $xmlXpath->query('//*/PriceAction/Policy'); foreach($policyElements as $policyElement) { $policyId = $policyElement->getAttribute('policyID'); if ($xmlXpath ->query($policyElement->parentNode->getNodePath().'/DiscountLineAmount') ->item(0) instanceof DOMElement ) { $discountLineAmount = $xmlXpath ->query($policyElement->parentNode->getNodePath().'/DiscountLineAmount') ->item(0) ->nodeValue; } elseif ($xmlXpath ->query($policyElement->parentNode->getNodePath().'/DiscountAmount') ->item(0) instanceof DOMElement ) { $discountLineAmount = $xmlXpath ->query($policyElement->parentNode->getNodePath().'/DiscountAmount') ->item(0) ->nodeValue; } if ($discountLineAmount && $discountLineAmount != 0) { if (!array_key_exists($policyId, $this->discounts)) { $this->discounts[$policyId]= array( 'amount' => 0, 'name' => $policyElement->getAttribute('policyName'), 'policyId' => $policyId ); } $this->discounts[$policyId]['amount'] += $discountLineAmount; $this->totalDiscountAmount += $discountLineAmount; } } $freeItemAvailabilities['header'] = array(); $freeItemAvailabilities['orderLines'] = array(); $freeItemAvailabilities['header'] = $xmlXpath->query('//*/Header/*/FreeItemAvailability'); $freeItemAvailabilities['orderLines'] = $xmlXpath->query('*/LineItem/*/FreeItemAvailability'); foreach($freeItemAvailabilities as $area=>$fia) { foreach ($fia as $freeItemAvailibility) { $policyId = $freeItemAvailibility->getAttribute('policyID'); if ($policyId && !array_key_exists($policyId, $this->freeItems)) { $location = ''; if($area == 'header') { $location = $area; } else { $location = 'unresolvedOrderLine'; $lineRef = $xmlXpath ->query(strstr($freeItemAvailibility->getNodePath(), '/MarketingPolicyFreeItems', true)) ->item(0); if($lineRef instanceof DOMElement) { $location = $lineRef->getAttribute('externalLineReference'); } } $this->freeItems[$policyId.'_'.$location] = array( 'name' => $freeItemAvailibility->getAttribute('policyName'), 'policyId' => $policyId, 'lineReference' => $location, 'items' => array(), ); $freeItems = $xmlXpath-> query($freeItemAvailibility->getNodePath().'/FreeItem'); foreach ($freeItems as $freeItem) { $this->freeItems[$policyId.'_'.$location]['items'][] = array( 'itemCode' => $xmlXpath->query($freeItem->getNodePath().'/ItemCode')->item(0)->nodeValue, 'qty'=> $xmlXpath->query($freeItem->getNodePath().'/Quantity')->item(0)->nodeValue, 'name' => $this->_getProductName( $xmlXpath->query($freeItem->getNodePath().'/ItemCode')->item(0)->nodeValue ), ); } } } } } if ($pricingType == self::PRICING_TYPE_TAX || $pricingType == self::PRICING_TYPE_COMPLETE ) { $pricesIncludeTax = $xmlXpath ->query("//Header/SalesInclTax") ->item(0) ->nodeValue; $this->omxTaxSettings['pricesIncludeTax'] = Mage::helper('hooks/data')->evalOmxBoolean($pricesIncludeTax); $this->totalTax['amount'] = $xmlXpath ->query("//OrderTotals/TotalTax") ->item(0) ->nodeValue; $this->shippingTax['amount'] = $xmlXpath ->query("//ShippingInformation/SHTax") ->item(0) ->nodeValue; $shippingHasTax = $xmlXpath ->query("//ShippingInformation/TaxSH") ->item(0) ->nodeValue; $this->shippingTax['hasTax'] = Mage::helper('hooks/data')->evalOmxBoolean($shippingHasTax); $lineItems = $xmlXpath->query("//OrderDetail/LineItem"); $this->subtotalTaxAmount = 0; $this->pricedQuoteId = $this->_quote->getId(); $this->itemsTax = array(); foreach($lineItems as $lineItem) { $itemAmount = $lineItem ->getElementsByTagName('Tax') ->item(0) ->nodeValue; $itemId = $lineItem->getAttribute('externalLineReference'); if ($itemId != 'discountCoupon' && $itemId != -1) { $this->itemsTax[$itemId]['itemId'] = $itemId; $this->itemsTax[$itemId]['sku'] = $lineItem->getElementsByTagName('ItemCode') ->item(0) ->nodeValue; $this->itemsTax[$itemId]['taxAmountRowTotal'] = $itemAmount; $this->itemsTax[$itemId]['rowTotalInclTax'] = $lineItem ->getElementsByTagName('TotalLine') ->item(0) ->nodeValue; $this->subtotalTaxAmount += $itemAmount; } else { $this->couponTax['itemId'] = $itemId; $this->couponTax['percentage'] = $lineItem ->getElementsByTagName('TaxPercent') ->item(0) ->nodeValue; $this->couponTax['taxAmountRowTotal'] = $itemAmount; $this->couponTax['couponDescription'] = $lineItem ->getElementsByTagName('ItemCode') ->item(0) ->nodeValue; $this->couponTax['rowTotalInclTax'] = $lineItem ->getElementsByTagName('TotalLine') ->item(0) ->nodeValue; } } $addressErrorMessage = 'The provided ship-to state is not valid for this country'; $errors = $xmlXpath->query("//ErrorData/Error"); foreach ($errors as $error) { if (strstr($error->nodeValue, $addressErrorMessage)) { Mage::throwException('Invalid Shipping address'); } } } } protected function _getProductName($sku) { $product = Mage::getModel('catalog/product')->loadByAttribute('sku',$sku); if($product instanceof Mage_Catalog_Model_Product) { $name = $product->getName('arduino'); } else { $name = Mage::helper('hooks/data')->__('Unresolved product name (id: %s)', $sku); } return $name; } } 