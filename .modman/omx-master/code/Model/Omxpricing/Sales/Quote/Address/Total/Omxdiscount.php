<?php
 class Omx_Hooks_Model_Omxpricing_Sales_Quote_Address_Total_Omxdiscount extends Mage_Sales_Model_Quote_Address_Total_Abstract { public function __construct() { $this->setCode('omxdiscount'); } public function collect(Mage_Sales_Model_Quote_Address $address) { $this->_setAddress($address); if ( $address->getQuoteId() ) { if ($address->getAddressType() == $this->_getAddressToUse() && $address->getBaseSubtotal() >= 0 ) { if ($this->_checkItemIds($address->getAllItems())) { $this->_setOmxDiscount($address); } } } } protected function _setOmxDiscount(Mage_Sales_Model_Quote_Address $address) { try { $pricingCalculator = Mage::getModel('hooks/omxpricing_sessionCalculator', $address); $pricingCalculator->getPricing(); $quote = $address->getQuote(); $store = $address->getQuote()->getStore(); $discountPolicyLines = $pricingCalculator->discounts; foreach($discountPolicyLines as $policyId=>$policyLine) { $discountPolicyLines[$policyId]['baseAmount'] = $policyLine['amount']; $discountPolicyLines[$policyId]['amount'] = $store->convertPrice($policyLine['amount']); } $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['discountPolicies'] = $discountPolicyLines; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['baseDiscountTotalAmount'] = $pricingCalculator->totalDiscountAmount; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['discountTotalAmount'] = $store->convertPrice($pricingCalculator->totalDiscountAmount); $oldFreeItemDiscounts = Mage::helper('hooks/omxpricing')->getDiscounts( $quote, Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS ); $selectedItems=array(); if(array_key_exists('selectedItems', $oldFreeItemDiscounts)) { if(is_array($oldFreeItemDiscounts['selectedItems'])) { $selectedItems = $oldFreeItemDiscounts['selectedItems']; } } $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selections'] = $pricingCalculator->freeItems; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['canSelect'] = (count($pricingCalculator->freeItems) > 0) ? true : false; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems'] = $selectedItems; if (array_key_exists('selectedItems', $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS])) { $hasSelections = false; if(array_key_exists('selections', $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS])) { if(is_array($omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selections'])) { $hasSelections = true; } } if(is_array($omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems']) && $hasSelections) { foreach($omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems'] as $key=>$vaule) { if(!array_key_exists($key, $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selections'])) unset($omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems'][$key]); } } if(is_array($omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems']) && !$hasSelections) { $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems'] = array(); } } Mage::helper('hooks/omxpricing')->setDiscounts( $quote, $omxQuoteDiscounts ); $address->setGrandTotal( $address->getGrandTotal()-$omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['discountTotalAmount'] ); $address->setBaseGrandTotal( $address->getBaseGrandTotal()-$omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['baseDiscountTotalAmount'] ); } catch (Exception $e) { $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['discountPolicies'] = array(); $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['baseDiscountTotalAmount'] = 0; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS]['discountTotalAmount'] = 0; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selections'] = array(); $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['canSelect'] = false; $omxQuoteDiscounts[Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS]['selectedItems'] = array(); Mage::helper('hooks/omxpricing')->setDiscounts( $address->getQuote(), $omxQuoteDiscounts ); Mage::helper('hooks/data')->log( null, null, 'OMXTAXCALL: '.$e->getMessage() ); } } private function _checkItemIds($items = array()) { if (!count($items)) { return false; } foreach($items as $item) { if (!$item->getId()) { return false; } } return true; } public function fetch(Mage_Sales_Model_Quote_Address $address) { if($address->getAddressType() == $this->_getAddressToUse()) { $amountDiscounts = Mage::helper('hooks/omxpricing')->getDiscounts( $address->getQuote(), Omx_Hooks_Model_Omxpricing_Calculator::OMX_AMOUNT_DISCOUNTS ); $freeItemDiscounts = Mage::helper('hooks/omxpricing')->getDiscounts( $address->getQuote(), Omx_Hooks_Model_Omxpricing_Calculator::OMX_FREE_ITEM_DISCOUNTS ); $discountTotalAmount = (array_key_exists('discountTotalAmount', $amountDiscounts)) ? $amountDiscounts['discountTotalAmount'] : null; $baseDiscountTotalAmount = (array_key_exists('baseDiscountTotalAmount', $amountDiscounts)) ? $amountDiscounts['baseDiscountTotalAmount'] : null; $address->addTotal( array( 'code' => $this->getCode(), 'title' => Mage::helper('hooks/data')->__('Discount Lines'), 'value' => $discountTotalAmount, 'base_value' => $baseDiscountTotalAmount, 'discount_lines' => $amountDiscounts, 'free_items_discounts' => $freeItemDiscounts, ) ); return $this; } } protected function _getAddressToUse() { if($this->_address instanceof Mage_Sales_Model_Quote_Address) { $quote = $this->_address->getQuote(); } else { $quote = Mage::getSingleton('checkout/session')->getQuote(); } $useOmxTax = (Mage::helper('hooks/data')->getSettings('useOmxTaxCalculation') == 1 ) ? true : false; if($quote->isVirtual()) { return 'billing'; } if($useOmxTax) { return 'shipping'; } else { switch (Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_BASED_ON)) { case 'shipping' : case 'origin' : return 'shipping'; case 'billing' : return 'billing'; default: return 'shipping'; } } } }