<?php
 class Omx_Hooks_Model_Omxpricing_Sales_Quote_Address_Total_Tax extends Mage_Sales_Model_Quote_Address_Total_Abstract { protected $_config; public function __construct() { $this->setCode('tax'); $this->_config = Mage::getSingleton('tax/config'); } public function collect(Mage_Sales_Model_Quote_Address $address) { $this->_setAddress($address); $address->setTotalAmount($this->getCode(), 0); $address->setBaseTotalAmount($this->getCode(), 0); $address->setTaxAmount(0); $address->setBaseTaxAmount(0); $address->setShippingTaxAmount(0); $address->setBaseShippingTaxAmount(0); if ($address->getQuoteId()) { $addressType = $this->_getAddressToUse(); if ($address->getAddressType() == $addressType && $address->getBaseSubtotal() >= 0 ) { if ($this->_checkItemIds($address->getAllItems())) { $this->_setOmxTax($address); } } } return $this; } protected function _setOmxTax(Mage_Sales_Model_Quote_Address $address) { try { $pricingCalculator = Mage::getModel('hooks/omxpricing_sessionCalculator', $address); $pricingCalculator->getPricing(); if($pricingCalculator->hasAddressError()) { $errorMessageText = 'Shipping address is invalid or incomplete. Tax calulation is uncompleted.'; $this->_setUniqueWarning($errorMessageText); } $store = $address->getQuote()->getStore(); $address->setBaseSubtotalInclTax(0); $address->setSubtotalInclTax(0); $address->setBaseSubtotalInclTax($address->getBaseSubtotal() + $pricingCalculator->subtotalTaxAmount); $address->setSubtotalInclTax( $address->getSubtotal() + $store->convertPrice($pricingCalculator->subtotalTaxAmount) ); foreach($pricingCalculator->itemsTax as $itemId=>$itemTax) { $item = $address->getQuote()->getItemById($itemId); if(!$item instanceof Mage_Sales_Model_Quote_Item) { $allItems = $address->getQuote()->getAllItems(); $isInsideQuote = false; foreach($allItems as $i) { if ($i->getId() == $itemId) { $isInsideQuote = true; $item = $i; } } if (!$isInsideQuote) { Mage::throwException('Invalid item_id (externalLineReference) returned from OMX tax call. Returened item_is:'.$itemId); } } $amount = $store->convertPrice($itemTax['taxAmountRowTotal']); $baseAmount = $itemTax['taxAmountRowTotal']; $item->setBaseTaxAmount($baseAmount); $item->setTaxAmount($amount); $this->_addBaseAmount($baseAmount); $this->_addAmount($amount); $parentItem = $item->getParentItem(); if(!is_null($parentItem)) { $parentItem->setBaseTaxAmount($baseAmount); $parentItem->setTaxAmount($amount); } } $coupons = $pricingCalculator->couponTax; if (sizeof($coupons) > 0) { $this->_addBaseAmount($coupons['taxAmountRowTotal']); $this->_addAmount($store->convertPrice($coupons['taxAmountRowTotal'])); } if($pricingCalculator->shippingTax['hasTax'] && $pricingCalculator->shippingTax['amount'] > 0) { $shippingTaxAmount = $store->convertPrice($pricingCalculator->shippingTax['amount']); $address->setBaseShippingTaxAmount($pricingCalculator->shippingTax['amount']); $address->setShippingTaxAmount( $shippingTaxAmount ); $address->setBaseShippingInclTax($address->getBaseShippingAmount() + $pricingCalculator->shippingTax['amount']); $address->setShippingInclTax($address->getShippingAmount() + $shippingTaxAmount); $this->_addBaseAmount($pricingCalculator->shippingTax['amount']); $this->_addAmount($shippingTaxAmount); } } catch (Exception $e) { $address->setBaseSubtotalInclTax(0); $address->setSubtotalInclTax(0); if (strstr(mb_strtolower($e->getMessage()), 'invalid shipping address')) { $errorMessageText ='Missing or incomplete shipping address. The tax estimation could not be calculated.'; $this->_setUniqueWarning($errorMessageText); } else { $actionNames = array('saveBilling', 'saveShipping', 'saveShippingMethod', 'savePayment', 'saveOrder', ); $request = Mage::app()->getFrontController()->getRequest(); if (! ($request->getControllerModule() == 'Omx_Hooks' && in_array($request->getActionName(), $actionNames) ) ) { $errorMessageText = Mage::helper('hooks/data')->__('An error occured during tax calculation. Estimated tax amounts may be incomplete or incorrect.'); $messages = Mage::getSingleton('checkout/session')->getMessages()->getErrors(); $messageExists = false; foreach($messages as $message) { if ($message->getCode() == $errorMessageText) { $messageExists = true; break; } } if (!$messageExists) { Mage::getSingleton('checkout/session')->addException($e, $errorMessageText); } } Mage::helper('hooks/data')->log( null, null, 'OMXTAXCALL: '.$e->getMessage() ); } } } public function fetch(Mage_Sales_Model_Quote_Address $address) { $applied = $address->getAppliedTaxes(); $store = $address->getQuote()->getStore(); $amount = $address->getTaxAmount(); $area = null; if ($this->_config->displayCartTaxWithGrandTotal($store) && $address->getGrandTotal()) { $area = 'taxes'; } if (($amount!=0) || ($this->_config->displayCartZeroTax($store))) { $address->addTotal(array( 'code' => $this->getCode(), 'title' => Mage::helper('tax')->__('Tax'), 'full_info' => $applied ? $applied : array(), 'value' => $amount, 'area' => $area )); } $store = $address->getQuote()->getStore(); if ($this->_config->displayCartSubtotalBoth($store) || $this->_config->displayCartSubtotalInclTax($store)) { if ($address->getSubtotalInclTax() > 0) { $subtotalInclTax = $address->getSubtotalInclTax(); } else { $subtotalInclTax = $address->getSubtotal()+$address->getTaxAmount()-$address->getShippingTaxAmount(); } $address->addTotal(array( 'code' => 'subtotal', 'title' => Mage::helper('sales')->__('Subtotal'), 'value' => $subtotalInclTax, 'value_incl_tax' => $subtotalInclTax, 'value_excl_tax' => $address->getSubtotal(), )); } return $this; } private function _checkItemIds($items = array()) { if (!count($items)) { return false; } foreach($items as $item) { if (!$item->getId()) { return false; } } return true; } protected function _getAddressToUse() { if ($this->_address instanceof Mage_Sales_Model_Quote_Address) { $quote = $this->_address->getQuote(); } else { $quote = Mage::getSingleton('checkout/session')->getQuote(); } if($quote->isVirtual()) { return 'billing'; } else { return 'shipping'; } } protected function _setUniqueWarning($errorMessageText) { $errorMessageText = Mage::helper('hooks/data') ->__($errorMessageText); $messages = Mage::getSingleton('checkout/session')->getMessages()->getItemsByType('warning'); $messageExists = false; foreach ($messages as $message) { if ($message->getCode() == $errorMessageText) { $messageExists = true; break; } } if(!$messageExists) { Mage::getSingleton('checkout/session')->addWarning($errorMessageText); } } protected $_code; protected $_address = null; protected function _addAmount($amount) { $this->_getAddress()->addTotalAmount($this->getCode(),$amount); return $this; } protected function _addBaseAmount($baseAmount) { $this->_getAddress()->addBaseTotalAmount($this->getCode(), $baseAmount); return $this; } protected function _setAddress(Mage_Sales_Model_Quote_Address $address) { $this->_address = $address; return $this; } protected function _getAddress() { if ($this->_address === null) { Mage::throwException( Mage::helper('sales')->__('Address model is not defined') ); } return $this->_address; } } 