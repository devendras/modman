<?php
 class Omx_Hooks_Model_Product { const UI_FUNCTIONS = '_uiFunctions_'; const CRON_FUNCTIONS = '_cronFunctions_'; private $_product; private $_msgFunction; private $_msgObject; public function __construct () { $args = func_get_args(); if (count($args[0]) > 0) { if ($args[0][0] instanceof Mage_Catalog_Model_Product){ $this->_product = $args[0][0]; } if(isset($args[0][1])) { $this->_msgFunction = $args[0][1]; } if(isset($args[0][2])) { $this->_msgObject = $args[0][2]; } } } public function loadFromSku ($sku) { $product = Mage::getModel('catalog/product'); if ($productId = $product->getIdBySku($sku)) { $product->setStoreId(0) ->load($productId); } if ($product->getId()) { $this->_product = $product; return $this; } else { return false; } } public function getStandingOrders () { $standingOrders = array(); if ($this->_product instanceof Mage_Catalog_Model_Product) { $options = $this->_product->getOptions(); $continuity = Mage::getModel('hooks/connector')->continuityCustomOptionName; foreach ($options as $option) { if ($option->getTitle() == $continuity) { $values = $option->getValues(); if (!$option->getIsRequire()) $standingOrders[] = ''; foreach ($option->getValues() as $value) { $standingOrders[] = $value->getTitle(); } } } } return $standingOrders; } public function setDataFromOmxItem($stringDate) { $xmlObject = Mage::getModel('hooks/xml_item_information_request', $this->_product); $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Item_Information_Request) { $credentials = array( 'xml' => $xmlObject ); $omx_item = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_ItIR, $credentials); if ($omx_item !== false) { $this->_product->setOmxLastChecked($stringDate); $this->_product->getResource()->saveAttribute($this->_product, "omx_last_checked"); $successElements = $omx_item->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue){ $this->_product->setOmxProductExists(true); $this->_product->getResource()->saveAttribute($this->_product, "omx_product_exists"); $lastUpdated = $omx_item->getElementsByTagName('LastUpdatedDate'); if ($lastUpdated->length) { $this->_product->setOmxLastUpdated($lastUpdated->item(0)->nodeValue); $this->_product->getResource()->saveAttribute($this->_product, "omx_last_updated"); } if ($this->_doMatch($omx_item)) { $this->_product->setOmxDetailsMatch(true); $this->_product->getResource()->saveAttribute($this->_product, "omx_details_match"); } else { $this->_product->setOmxDetailsMatch(false); $this->_product->getResource()->saveAttribute($this->_product, "omx_details_match"); } } else { $this->_product->setOmxProductExists(false); $this->_product->getResource()->saveAttribute($this->_product, "omx_product_exists"); } return true; } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error getting the product information from OMX.')); return false; } } return true; } public function pushDataToOmx($isCreation, $stringDate) { try { if ($isCreation) $xmlObject = Mage::getModel('hooks/xml_item_create_request', $this->_product); else $xmlObject = Mage::getModel('hooks/xml_item_update_request', $this->_product); } catch (Exception $e) { $this->{$this->_msgFunction . 'Error'}($e->getMessage()); return false; } $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Item_Create_Request || $xmlObject instanceof Omx_Hooks_Model_Xml_Item_Update_Request) { $credentials = array( 'xml' => $xmlObject ); $response = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_ItUR, $credentials); if ($response !== false) { $successElements = $response->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue) { $this->_product->setOmxLastPushed($stringDate); $this->_product->getResource()->saveAttribute($this->_product, "omx_last_pushed"); return true; } else { $errorData = $response->getElementsByTagName ('Error'); $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product to OMX:')); foreach ($errorData as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error->nodeValue)); } } } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product to OMX.')); } } return false; } public function pushPricesToOmx() { try { $xmlObject = Mage::getModel('hooks/xml_item_price_update_request', $this->_product); } catch (Exception $e) { $this->{$this->_msgFunction . 'Error'}($e->getMessage()); return false; } $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Item_Price_Update_Request) { $credentials = array( 'xml' => $xmlObject ); $response = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_IPUR, $credentials); if ($response !== false) { $successElements = $response->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue) { return true; } else { $errorData = $response->getElementsByTagName ('Error'); $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product prices to OMX:')); foreach ($errorData as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error->nodeValue)); } } } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product prices to OMX.')); } } return false; } public function pushCustomizationsToOmx() { $options = $this->_product->getOptions(); $continuity = Mage::getModel('hooks/connector')->continuityCustomOptionName; foreach ($options as $i => $option) { if ($option->getData('title') == $continuity) { unset($options[$i]); $options = array_values($options); } } $connector = Mage::getModel('hooks/connector'); foreach ($options as $option) { try { $xmlObject = Mage::getModel('hooks/xml_item_customization_update_request', $option); } catch (Exception $e) { $this->{$this->_msgFunction . 'Error'}($e->getMessage()); return false; } if ($xmlObject instanceof Omx_Hooks_Model_Xml_Item_Customization_Update_Request) { $credentials = array( 'xml' => $xmlObject ); $response = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_ICUR, $credentials); if ($response !== false) { $successElements = $response->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue) { } else { $errorData = $response->getElementsByTagName ('Error'); $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product customizations to OMX:')); foreach ($errorData as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error->nodeValue)); } return false; } } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product customizations to OMX.')); return false; } } else { return false; } } return true; } public function pushInventoryToOmx($product = NULL) { if (is_null($product)) $product = $this->_product; if (!$product->getStockItem()->getManageStock() || $product->getStockItem()->getQty() == 0) { return true; } $xmlObject = Mage::getModel('hooks/xml_inventory_update_request', $product); $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Inventory_Update_Request) { $credentials = array( 'xml' => $xmlObject ); $response = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_IUR, $credentials); if ($response === true) { return true; } elseif ($response === false) { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product inventory to OMX.')); } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the product inventory to OMX:')); foreach ($response as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error)); } } } return false; } public function pushSubitemsToOmx() { if (!$this->_product->isConfigurable()) { return true; } $subitems = $this->_product->getTypeInstance()->getUsedProducts(); $omxSubitems = $this->getSubitemsFromOmx(); if(!is_array($omxSubitems)) return false; try { $xmlObject = Mage::getModel('hooks/xml_subitem_update_request', array($this->_product, $subitems, $omxSubitems)); } catch (Exception $e) { $this->{$this->_msgFunction . 'Error'}($e->getMessage()); return false; } $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Subitem_Update_Request) { $credentials = array( 'xml' => $xmlObject ); $response = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_SItUR, $credentials); if ($response !== false) { $successElements = $response->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue) { return $this->_pushSubitemsInventoryToOmx($subitems, $omxSubitems); } else { $errorData = $response->getElementsByTagName ('Error'); $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the sub-products to OMX:')); foreach ($errorData as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error->nodeValue)); } } } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error sending the sub-products to OMX.')); } } return false; } public function getSubitemsFromOmx() { if (!$this->_product->isConfigurable()) { return array(); } $xmlObject = Mage::getModel('hooks/xml_item_information_request', $this->_product); $connector = Mage::getModel('hooks/connector'); if ($xmlObject instanceof Omx_Hooks_Model_Xml_Item_Information_Request) { $credentials = array( 'xml' => $xmlObject ); $omx_item = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_ItIR, $credentials); if ($omx_item !== false) { $successElements = $omx_item->getElementsByTagName ('Success'); if ($successElements->length && $successElements->item(0)->nodeValue){ $subitemsXml = $omx_item->getElementsByTagName('SubItem'); $subitems = array(); foreach ($subitemsXml as $subitem) { $subitems[] = strtoupper($subitem->getAttribute('itemCode')); } return $subitems; } else { $errorData = $omx_item->getElementsByTagName ('Error'); $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error getting the sub-product information from OMX.')); foreach ($errorData as $error) { $this->{$this->_msgFunction . 'Error'}('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . Mage::helper('hooks')->__($error->nodeValue)); } } } else { $this->{$this->_msgFunction . 'Error'}(Mage::helper('hooks')->__('There was an error getting the sub-product information from OMX.')); } } return false; } private function _pushSubitemsInventoryToOmx($subitems, $omxSubitems) { foreach ($subitems as $product) { if (in_array(strtoupper($product->getSku()), $omxSubitems) === false) { if(!$this->pushInventoryToOmx($product)) return false; } } return true; } private function _doMatch($omx_item) { $omx_item->preserveWhiteSpace = false; $xpath = new DOMXPath($omx_item); $itemData = $omx_item->getElementsByTagName('Item'); $prodnameData = $omx_item->getElementsByTagName('ProductName'); $priceData = $omx_item->getElementsByTagName('PriceData'); $itemcustomdetailData = $omx_item->getElementsByTagName('ItemCustomizationDetail'); $itemcustomData = $omx_item->getElementsByTagName('ItemCustomization'); if (!$itemData->length || !$prodnameData->length || !$priceData->length) return false; $omx_prodname = $prodnameData->item(0)->nodeValue; $prodname = $this->_product->getData('name'); if ($prodname != $omx_prodname) return false; $descriptionData = $omx_item->getElementsByTagName('InfoText'); $omx_short_description = ''; $omx_description = ''; foreach ($descriptionData as $descElement) { if ($descElement->getAttribute('type') == 'PlainText') $omx_short_description = str_replace(chr(13), '', $descElement->nodeValue); elseif ($descElement->getAttribute('type') == 'HTML') $omx_description = str_replace(chr(13), '', $descElement->nodeValue); } $shortdescription = str_replace(chr(13), '', $this->_product->getData('short_description')); $description = str_replace(chr(13), '', $this->_product->getData('description')); if ($shortdescription != $omx_short_description || $description != $omx_description) return false; $omx_status = strtolower($itemData->item(0)->getAttribute('active')) == "true" ? 1 : 0; $status = $this->_product->getData('status'); if ($status != $omx_status) return false; $weightData = $omx_item->getElementsByTagName('Weight'); $omx_weight = -1; if ($weightData->length) $omx_weight = $weightData->item(0)->nodeValue; $weight = $this->_product->getData('weight'); if (!isset($weight)) $weight = 0; if ($weight != $omx_weight) return false; $omx_prices = array(); $priceData = $priceData->item(0); if ($priceData->getAttribute('priceType') != 'Unit') return false; $omx_unitPrice = null; foreach ($priceData->getElementsByTagName('Price') as $price) { if ($price->getAttribute('quantity') == 1) { $omx_unitPrice = $price->getElementsByTagName('Amount')->item(0)->nodeValue; } else { $omx_prices[$price->getAttribute('quantity')] = $price->getElementsByTagName('Amount')->item(0)->nodeValue; } } if (is_null($omx_unitPrice)) return false; $price = $this->_product->getData('price'); if ($price != $omx_unitPrice) return false; $prices = $this->_product->getData('tier_price'); foreach ($prices as $i => $tier_price) { if (!$tier_price['all_groups']) { unset($prices[$i]); $prices = array_values($prices); } } if (count($omx_prices) != count($prices)) return false; foreach ($prices as $tier_price) { $qty = $tier_price['price_qty']; $intqty = intval($qty); if ($qty != $intqty) return false; if (array_key_exists($intqty, $omx_prices)) $omx_tier_price = $omx_prices[$intqty]; else return false; if ($omx_tier_price != $tier_price['price']) return false; } $options = $this->_product->getOptions(); $continuity = Mage::getModel('hooks/connector')->continuityCustomOptionName; foreach ($options as $i => $option) { if ($option->getData('title') == $continuity) { unset($options[$i]); $options = array_values($options); } } if ($itemcustomData->length != count($options)) return false; foreach ($options as $option) { $title = $option->getData('title'); $entries = $xpath->query('ItemCustomization/Name[.="'.$title.'"]', $itemcustomdetailData->item(0)); if ($entries->length == 0) return false; } return true; } private function _uiFunctions_Error ($message) { $this->_msgObject->addError($message); } private function _cronFunctions_Error ($message) { $this->_msgObject->errorMessages .= 'Product SKU ' . $this->_product->getSKU() . ': ' . $message . '<br/>'; $this->_msgObject->errorCounter += 1; if ($this->_msgObject->errorCounter >= 100) { $this->_msgObject->errorMessages .= 'The bulk transmission of products to OMX has been aborted because there were too many errors (100)<br/>'; throw new Exception('The bulk transmission of products to OMX has been aborted because there were too many errors (100)', 101); } } }