<?php
 class Omx_Hooks_Model_Order_Observer extends Omx_Hooks_Model_Observer { public function hooksCheckoutTypeMultishippingCreateOrdersSingle(Varien_Event_Observer $observer) { } public function hookSalesOrderPlaceBefore(Varien_Event_Observer $observer){ $checkMethods = array('ccsave','authorizenet','verisign'); $paymentMethod = $observer->getEvent()->getOrder()->getPayment()->getMethod(); if (in_array($paymentMethod, $checkMethods)) { $ccNumber = $observer->getEvent()->getOrder()->getPayment()->getCcNumber(); if($ccNumber) { $payment = $observer->getEvent()->getOrder()->getPayment(); $payment->setOmxOrderPaymentCreditcardnumber($ccNumber); } } return $this; } public function hookSalesOrderPlaceAfter (Varien_Event_Observer $observer) { $log = ""; $connectorEnabled = Mage::getModel('hooks/connector')->connectorEnabled; if ($connectorEnabled && $this->_moduleConfigured) { $order = $observer->getEvent()->getOrder(); if ($order instanceof Mage_Sales_Model_Order) { $exteriorOrder = $order->getExtOrderId(); $hasBeenInvoiced = $order->hasInvoices(); if (!$exteriorOrder && !$hasBeenInvoiced && (strpos($order->getPayment()->getMethod(), 'paypal') === FALSE)) { $log .= "NORMAL CHECKOUT\n"; $omxOrderId = Omx_Hooks_Model_Order_Transfer::send($order); $order->setOmxOrderId($omxOrderId); $order->getResource()->saveAttribute($order, "omx_order_id"); if ($order->getPayment()->getOmxOrderPaymentType() !== null) $this->saveCustomPaymentAttributes($order->getPayment()); } } } return $this; } public function hookSalesOrderSaveAfter (Varien_Event_Observer $observer) { $log = ""; $connectorEnabled = Mage::getModel('hooks/connector')->connectorEnabled; if ($connectorEnabled && $this->_moduleConfigured) { $order = $observer->getEvent()->getOrder(); $paymentInfo = $order->getPayment()->getAdditionalInformation(); $log .= "PAYMENT ADDITIONAL INFO: ".print_r($paymentInfo, true)."\n"; $isPaypalAuthorization = false; if(array_key_exists('paypal_pending_reason', $paymentInfo)) { $isPaypalAuthorization = $paymentInfo['paypal_pending_reason'] == 'authorization'; } $exteriorOrder = $order->getExtOrderId(); $hasBeenInvoiced = $order->hasInvoices(); if ($exteriorOrder && $hasBeenInvoiced) { $log .= "GOOGLE CHECKOUT\n"; $orderExists = false; $existingOmxEntries = Mage::getModel('hooks/data') ->getCollection() ->addFieldToFilter('order_id',array('eq' => $order->getIncrementId())) ->load(); foreach ($existingOmxEntries as $entry){ if ($entry->getId()) { $log .= "Order exists! Discarded.\n"; return $this; } } $omxOrderId = Omx_Hooks_Model_Order_Transfer::send($order); $order->setOmxOrderId($omxOrderId); $order->getResource()->saveAttribute($order, "omx_order_id"); if ($order->getPayment()->getOmxOrderPaymentType() !== null) $this->saveCustomPaymentAttributes($order->getPayment()); } elseif ($hasBeenInvoiced || $isPaypalAuthorization) { $log .= "PAYPAL\n"; $existingOmxEntries = Mage::getModel('hooks/data') ->getCollection() ->addFieldToFilter('order_id',array('eq' => $order->getIncrementId())) ->load(); foreach ($existingOmxEntries as $entry){ if ($entry->getId()) { $log .= "Order exists! Discarded.\n"; return $this; } } $omxOrderId = Omx_Hooks_Model_Order_Transfer::send($order); $order->setOmxOrderId($omxOrderId); $order->getResource()->saveAttribute($order, "omx_order_id"); if ($order->getPayment()->getOmxOrderPaymentType() !== null) $this->saveCustomPaymentAttributes($order->getPayment()); } } return $this; } public function hookCheckoutTypeOnepageSaveOrder (Varien_Event_Observer $observer) { return $this; } public function hookCheckoutTypeOnepageSaveOrderAfter (Varien_Event_Observer $observer) { return $this; } public function hookCheckoutOnepageControllerSuccessAction (Varien_Event_Observer $observer) { return $this; } protected function saveCustomPaymentAttributes (Mage_Sales_Model_Order_Payment $payment) { if ($payment->getOmxOrderPaymentType() === 1){ $creditCardNumber = $payment->getOmxOrderPaymentCreditcardnumber(); for ($i = 0; $i<(strlen($creditCardNumber) - 4); $i++) $creditCardNumber[$i] = '*'; $payment->setOmxOrderPaymentCreditcardnumber($creditCardNumber); } $payment->save(); } } 