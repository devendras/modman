<?php
 class Omx_Hooks_Block_Admin_Edit_Form extends Mage_Adminhtml_Block_Widget_Form { protected function _prepareForm () { $form = new Varien_Data_Form(array( 'id' => 'edit_form', 'action' => $this->getUrl('*/*/save', array()), 'method' => 'post' )); $fieldsetConSettings = $form->addFieldset( 'edit_connectionsettings', array('legend' => Mage::helper('hooks/data')->__('Connection Settings') ) ); $fieldsetSync = $form->addFieldset( 'edit_synchronization', array('legend' => Mage::helper('hooks/data')->__('Synchronization') ) ); $fieldsetAutoSub = $form->addFieldset( 'edit_autosubmission', array('legend' => Mage::helper('hooks/data')->__('Automatic Submissions') ) ); $fieldsetGiftCert = $form->addFieldset( 'edit_giftcert', array('legend' => Mage::helper('hooks/data')->__('Gift Certificates') ) ); $fieldsetTaxCalc = $form->addFieldset( 'edit_taxcalculation', array('legend' => Mage::helper('hooks/data')->__('Tax Calculation') ) ); $fiedsetDiscountCalc = $form->addFieldset( 'edit_discountcalculation', array('legend' => Mage::helper('hooks/data')->__('Discount Calculation') ) ); $fiedsetPaypalSettings = $form->addFieldset( 'edit_paypalsettings', array('legend' => Mage::helper('hooks/data')->__('Paypal Settings') ) ); $fieldsetConSettings->addField( 'connectorEnabled', 'checkbox', array( 'name' => 'connectorEnabled', 'title' => Mage::helper('hooks/data')->__('Enable the connector'), 'label' => Mage::helper('hooks/data')->__('Enable the connector'), 'required' => false, 'value' => '1' )); $fieldsetConSettings->addField( 'debugMode', 'checkbox', array( 'name' => 'debugMode', 'title' => Mage::helper('hooks/data')->__('Enable debug mode'), 'label' => Mage::helper('hooks/data')->__('Enable debug mode'), 'required' => false, 'value' => '1' ) ); $fieldsetConSettings->addField( 'udiAuthToken', 'text', array( 'name' => 'udiAuthToken', 'title' => Mage::helper('hooks/data')->__('UDI Auth Token'), 'label' => Mage::helper('hooks/data')->__('UDI Auth Token'), 'required' => true, ) ); $fieldsetConSettings->addField( 'udiUrl', 'text', array( 'name' => 'udiUrl', 'title' => Mage::helper('hooks/data')->__('UDI Url'), 'label' => Mage::helper('hooks/data')->__('UDI Url'), 'required' => true, ) ); $fieldsetConSettings->addField( 'additionalParams', 'text', array( 'name' => 'additionalParams', 'title' => Mage::helper('hooks/data')->__('Additional Params'), 'label' => Mage::helper('hooks/data')->__('Additional Params'), 'note' => Mage::helper('hooks/data')->__('Example: key1=value&key2=value'), 'required' => false, ) ); $fieldsetSync->addField( 'storeCode', 'text', array( 'name' => 'storeCode', 'title' => Mage::helper('hooks/data')->__('Default Store Code'), 'label' => Mage::helper('hooks/data')->__('Default Store Code'), 'required' => true, ) ); $fieldsetSync->addField( 'defaultKeycode', 'text', array( 'name' => 'defaultKeycode', 'title' => Mage::helper('hooks/data')->__('Default Keycode'), 'label' => Mage::helper('hooks/data')->__('Default Keycode'), 'required' => true, ) ); $fieldsetSync->addField( 'continuityCustomOptionName', 'text', array( 'name' => 'continuityCustomOptionName', 'title' => Mage::helper('hooks/data')->__('Continuity Custom Option Name'), 'label' => Mage::helper('hooks/data')->__('Continuity Custom Option Name'), 'required' => false, ) ); $fieldsetSync->addField( 'forceMagentoPrices', 'checkbox', array( 'name' => 'forceMagentoPrices', 'title' => Mage::helper('hooks/data')->__('Force Magento Prices'), 'label' => Mage::helper('hooks/data')->__('Force Magento Prices'), 'required' => false, 'value' => '1' ) ); $fieldsetSync->addField( 'autoCreateCoupons', 'checkbox', array( 'name' => 'autoCreateCoupons', 'title' => Mage::helper('hooks/data')->__('Auto-create Coupons in OMX'), 'label' => Mage::helper('hooks/data')->__('Auto-create Coupons in OMX'), 'required' => false, 'value' => '1', ) ); $fieldsetSync->addField( 'refreshInventory', 'checkbox', array( 'name' => 'refreshInventory', 'title' => Mage::helper('hooks/data')->__('Refresh Inventory'), 'label' => Mage::helper('hooks/data')->__('Refresh Inventory'), 'required' => false, 'value' => '1' ) ); $fieldsetSync->addField( 'checkOrderTotalAmount', 'checkbox', array( 'name' => 'checkOrderTotalAmount', 'title' => Mage::helper('hooks/data')->__('Check Order Total Amount'), 'label' => Mage::helper('hooks/data')->__('Check Order Total Amount'), 'required' => false, 'value' => '1' ) ); $fieldsetSync->addField( 'shippingMethodNonShippable', 'text', array( 'name' => 'shippingMethodNonShippable', 'title' => Mage::helper('hooks/data')->__('Shipping Method for non-shippable orders'), 'label' => Mage::helper('hooks/data')->__('Shipping Method for non-shippable orders'), 'required' => true, ) ); $fieldsetAutoSub->addField( 'autoProductSendingTime', 'text', array( 'name' => 'autoProductSendingTime', 'title' => Mage::helper('hooks/data')->__('Daily auto-submission time for new items'), 'label' => Mage::helper('hooks/data')->__('Daily auto-submission time for new items'), 'note' => Mage::helper('hooks/data')->__('Time format: HH:MM. <br /><b>Leave blank</b> for manual submission only.'), 'required' => false, ) ); if (method_exists(Mage::helper('core/data'), 'isModuleEnabled')) { $gcaEnabled = Mage::helper('core/data')->isModuleEnabled('Enterprise_GiftCardAccount'); } else { $gcaEnabled = true; } $fieldOptions = array( 'name' => 'useOmxGiftCertificates', 'title' => Mage::helper('hooks/data')->__('Use Omx Gift Certificates (instead of Magento Gift Cards)'), 'label' => Mage::helper('hooks/data')->__('Use Omx Gift Certificates'), 'note' => Mage::helper('hooks/data')->__('Check this if you want to use OMX Gift Certificates <br />instead of Magento Gift Cards.'), 'required' => false, 'value' => '1', ); $canUseGiftCert = true; if(!$gcaEnabled) { $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature activate GiftCardAccount module.').'</div>'; $fieldOptions['disabled'] = 'disabled'; $canUseGiftCert = false; } elseif (!Mage::helper('core/data')->isModuleOutputEnabled('Enterprise_GiftCardAccount')) { $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature enable output for GiftCardAccount Module.'). '</div>'; $fieldOptions['disabled'] = 'disabled'; $canUseGiftCert = false; } $fieldsetGiftCert->addField('useOmxGiftCertificates', 'checkbox', $fieldOptions); $annotation = array(); $annotation[] = Mage::helper('hooks/data')->__('Check this if you want to use OMX to calculate taxes. '); $annotation[] = Mage::helper('hooks/data')->__('<b>Note:</b> If OMX might be not reachable <i>Magento Tax<br />Calculation</i> is used instead!'); if(Mage::getStoreConfig('google/checkout/active') == 1 ) { $annotation[] = '<span class="error">'. Mage::helper('hooks/data')->__('Google Checkout is enabled: When using this payment gateway <i>Magento Tax Calculation</i> will be used during checkout.').'</span>'; } $fieldOptions = array( 'name' => 'useOmxTaxCalculation', 'title' => Mage::helper('hooks/data')->__('Use Omx Tax Calculation'), 'label' => Mage::helper('hooks/data')->__('Use Omx Tax Calculation'), 'required' => false, 'value' => '1', 'note' => implode('<br />', $annotation), ); $canUseOmxTax = Mage::helper('hooks/omxpricing')->canUseOmxTax(); if (!$canUseOmxTax) { $fieldOptions['disabled'] = 'disabled'; $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature Magento must be configured to exlcude taxes in catalog- and shipping-prices.').'</div>'; } $fieldsetTaxCalc->addField('useOmxTaxCalculation','checkbox', $fieldOptions); $fieldOptions = array( 'name' => 'omxTaxMagentoFallbackMessage', 'title' => Mage::helper('hooks/data')->__('Custom fronted message for usage of Magento tax'), 'label' => Mage::helper('hooks/data')->__('Custom fronted message for usage of Magento tax'), 'note' => Mage::helper('hooks/data')->__('This message will be displayed when the tax calculation<br /> system switches <i>from the OMX- to the Magento-Engine</i>.<br /><b>Leave blank</b> for standard message.<br /><b>Type "none"</b> for no message.'), 'required' => false, ); if (!$canUseOmxTax) { $fieldOptions['disabled'] = 'disabled'; } $fieldsetTaxCalc->addField('omxTaxMagentoFallbackMessage', 'text', $fieldOptions); $fieldOptions = array( 'name' => 'omxTaxOmxFallbackMessage', 'title' => Mage::helper('hooks/data')->__('Custom fronted message for usage of OMX tax'), 'label' => Mage::helper('hooks/data')->__('Custom fronted message for usage of OMX tax'), 'note' => Mage::helper('hooks/data')->__('This message will be displayed when the tax calculation<br /> system switches from the <i>Magento- to the OMX-Engine</i>.<br /><b>Leave blank</b> for standard message.<b><br />Type "none"</b> for no message.'), 'required' => false, ); if(!$canUseOmxTax) { $fieldOptions['disabled'] = 'disabled'; } $fieldsetTaxCalc->addField('omxTaxOmxFallbackMessage', 'text', $fieldOptions); $fieldOptions = array( 'name' => 'useOmxMarketingPolicies', 'title' => Mage::helper('hooks/data')->__('Use OMX Markting Policies for discount calculation'), 'label' => Mage::helper('hooks/data')->__('Use OMX Markting Policies for discount calculation'), 'required' => false, ); $canUseOmxDiscount = Mage::helper('hooks/omxpricing')->canUseOmxDiscount(); if(!$canUseOmxDiscount) { $fieldOptions['disabled'] = 'disabled'; $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature Omx Tax Calculation must be enabled.').'</div>'; } $fiedsetDiscountCalc->addField( 'useOmxMarketingPolicies', 'checkbox', $fieldOptions ); $fieldOptions = array( 'name' => 'sendPaypalBillingAgreementID', 'title' => Mage::helper('hooks/data')->__('Automatically Send Paypal Billing Agreements to OMX'), 'label' => Mage::helper('hooks/data')->__('Automatically Send Paypal Billing Agreements to OMX'), 'note' => Mage::helper('hooks/data')->__('With this option enabled, on Paypal orders, the Connector<br /> will find any existing <b>Billing Agreement</b> in the customer\'s<br /> Magento account and send it to OMX with the order, even<br /> if the customer did not explicitly choose to pay that order<br /> using the Billing Agreement.'), 'required' => false ); $fiedsetPaypalSettings->addField( 'sendPaypalBillingAgreementID', 'checkbox', $fieldOptions ); $form->setUseContainer(true); $defaultValues = $this->_getDefaultValues(); $form->addValues ( $defaultValues ); if( $defaultValues['connectorEnabled']){ $form->getElement('connectorEnabled')->setIsChecked(true); } else { $form->getElement('connectorEnabled')->setIsChecked(false); } if( $defaultValues['debugMode']){ $form->getElement('debugMode')->setIsChecked(true); } else { $form->getElement('debugMode')->setIsChecked(false); } if( $defaultValues['forceMagentoPrices']){ $form->getElement('forceMagentoPrices')->setIsChecked(true); } else { $form->getElement('forceMagentoPrices')->setIsChecked(false); } if( $defaultValues['refreshInventory']){ $form->getElement('refreshInventory')->setIsChecked(true); } else { $form->getElement('refreshInventory')->setIsChecked(false); } if( $defaultValues['autoCreateCoupons']){ $form->getElement('autoCreateCoupons')->setIsChecked(true); } else { $form->getElement('autoCreateCoupons')->setIsChecked(false); } if( $defaultValues['checkOrderTotalAmount']){ $form->getElement('checkOrderTotalAmount')->setIsChecked(true); } else { $form->getElement('checkOrderTotalAmount')->setIsChecked(false); } if( $defaultValues['useOmxGiftCertificates'] && $canUseGiftCert){ $form->getElement('useOmxGiftCertificates')->setIsChecked(true); } else { $form->getElement('useOmxGiftCertificates')->setIsChecked(false); } if( $defaultValues['useOmxTaxCalculation'] && $canUseOmxTax){ $form->getElement('useOmxTaxCalculation')->setIsChecked(true); } else { $form->getElement('useOmxTaxCalculation')->setIsChecked(false); } if( $defaultValues['useOmxMarketingPolicies']){ $form->getElement('useOmxMarketingPolicies')->setIsChecked(true); } else { $form->getElement('useOmxMarketingPolicies')->setIsChecked(false); } if( $defaultValues['sendPaypalBillingAgreementID']){ $form->getElement('sendPaypalBillingAgreementID')->setIsChecked(true); } else { $form->getElement('sendPaypalBillingAgreementID')->setIsChecked(false); } $this->setForm($form); return parent::_prepareForm(); } private function _getDefaultValues () { $model = Mage::getModel('hooks/settings'); $collection = $model ->getCollection() ->load(); $results = array(); foreach( $collection->getItems() as $value ){ $tempValue = $value->toArray(); if( $value->isEditable()){ $results[$tempValue['name']] = $tempValue['value']; } } return $results; } }