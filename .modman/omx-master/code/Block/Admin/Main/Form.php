<?php
 class Omx_Hooks_Block_Admin_Main_Form extends Mage_Adminhtml_Block_Widget_Form { protected function _prepareForm () { $form = new Varien_Data_Form(array( 'id' => 'view_form', 'action' => $this->getUrl('*/*/save', array()), 'method' => 'post' )); $fieldsetConSettings = $form->addFieldset( 'edit_connectionsettings', array('legend' => Mage::helper('hooks/data')->__('Connection Settings') ) ); $fieldsetSync = $form->addFieldset( 'edit_synchronization', array('legend' => Mage::helper('hooks/data')->__('Synchronization') ) ); $fieldsetAutoSub = $form->addFieldset( 'edit_autosubmission', array('legend' => Mage::helper('hooks/data')->__('Automatic Submissions') ) ); $fieldsetGiftCert = $form->addFieldset( 'edit_giftcert', array('legend' => Mage::helper('hooks/data')->__('Gift Certificates') ) ); $fieldsetTaxCalc = $form->addFieldset( 'edit_taxcalculation', array('legend' => Mage::helper('hooks/data')->__('Tax Calculation') ) ); $fiedsetDiscountCalc = $form->addFieldset( 'edit_discountcalculation', array('legend' => Mage::helper('hooks/data')->__('Discount Calculation') ) ); $fiedsetPaypalSettings = $form->addFieldset( 'edit_paypalsettings', array('legend' => Mage::helper('hooks/data')->__('Paypal Settings') ) ); $fieldsetConSettings->addField( 'configured', 'checkbox', array( 'name' => 'configured', 'title' => Mage::helper('hooks')->__('Connector is configured correctly'), 'label' => Mage::helper('hooks')->__('Connector is configured correctly'), 'required' => false, 'value' => Mage::getModel('hooks/connector')->isConfigured(), 'disabled' => 'disabled' )); $fieldsetConSettings->addField( 'connectorEnabled', 'checkbox', array( 'name' => 'connectorEnabled', 'title' => Mage::helper('hooks')->__('Enable the connector'), 'label' => Mage::helper('hooks')->__('Enable the connector'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' )); $fieldsetConSettings->addField( 'debugMode', 'checkbox', array( 'name' => 'debugMode', 'title' => Mage::helper('hooks')->__('Enable debug mode'), 'label' => Mage::helper('hooks')->__('Enable debug mode'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' ) ); $fieldsetConSettings->addField( 'udiAuthToken', 'text', array( 'name' => 'udiAuthToken', 'title' => Mage::helper('hooks')->__('UDI Auth Token'), 'label' => Mage::helper('hooks')->__('UDI Auth Token'), 'required' => true, 'disabled' => 'disabled' ) ); $fieldsetConSettings->addField( 'udiUrl', 'text', array( 'name' => 'udiUrl', 'title' => Mage::helper('hooks')->__('UDI Url'), 'label' => Mage::helper('hooks')->__('UDI Url'), 'required' => true, 'disabled' => 'disabled' ) ); $fieldsetConSettings->addField( 'additionalParams', 'text', array( 'name' => 'additionalParams', 'title' => Mage::helper('hooks')->__('Additional Params'), 'label' => Mage::helper('hooks')->__('Additional Params (ex: key1=value&key2=value)'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'storeCode', 'text', array( 'name' => 'storeCode', 'title' => Mage::helper('hooks')->__('Default Store Code'), 'label' => Mage::helper('hooks')->__('Default Store Code'), 'required' => true, 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'defaultKeycode', 'text', array( 'name' => 'defaultKeycode', 'title' => Mage::helper('hooks')->__('Default Keycode'), 'label' => Mage::helper('hooks')->__('Default Keycode'), 'required' => true, 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'continuityCustomOptionName', 'text', array( 'name' => 'continuityCustomOptionName', 'title' => Mage::helper('hooks')->__('Continuity Custom Option Name'), 'label' => Mage::helper('hooks')->__('Continuity Custom Option Name'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'forceMagentoPrices', 'checkbox', array( 'name' => 'forceMagentoPrices', 'title' => Mage::helper('hooks')->__('Force Magento Prices'), 'label' => Mage::helper('hooks')->__('Force Magento Prices'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'autoCreateCoupons', 'checkbox', array( 'name' => 'autoCreateCoupons', 'title' => Mage::helper('hooks')->__('Auto-create Coupons in OMX'), 'label' => Mage::helper('hooks')->__('Auto-create Coupons in OMX'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'refreshInventory', 'checkbox', array( 'name' => 'refreshInventory', 'title' => Mage::helper('hooks')->__('Refresh Inventory'), 'label' => Mage::helper('hooks')->__('Refresh Inventory'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'checkOrderTotalAmount', 'checkbox', array( 'name' => 'checkOrderTotalAmount', 'title' => Mage::helper('hooks')->__('Check Order Total Amount'), 'label' => Mage::helper('hooks')->__('Check Order Total Amount'), 'required' => false, 'value' => '1', 'disabled' => 'disabled' ) ); $fieldsetSync->addField( 'shippingMethodNonShippable', 'text', array( 'name' => 'shippingMethodNonShippable', 'title' => Mage::helper('hooks')->__('Shipping Method for non-shippable orders'), 'label' => Mage::helper('hooks')->__('Shipping Method for non-shippable orders'), 'required' => true, 'disabled' => 'disabled' ) ); $fieldsetAutoSub->addField( 'autoProductSendingTime', 'text', array( 'name' => 'autoProductSendingTime', 'title' => Mage::helper('hooks')->__('Daily auto-submission time for new items (leave blank for manual submission only)'), 'label' => Mage::helper('hooks')->__('Daily auto-submission time for new items (leave blank for manual submission only)'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetAutoSub->addField( 'lastResubmissionJobTime', 'text', array( 'name' => 'lastResubmissionJobTime', 'title' => Mage::helper('hooks')->__('Last Order Resubmission Job Time'), 'label' => Mage::helper('hooks')->__('Last Order Resubmission Job Time'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetAutoSub->addField( 'resubmissionJobRunCount', 'text', array( 'name' => 'resubmissionJobRunCount', 'title' => Mage::helper('hooks')->__('Order Resubmission Job Run Count'), 'label' => Mage::helper('hooks')->__('Order Resubmission Job Run Count'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetAutoSub->addField( 'lastProductSendingJobTime', 'text', array( 'name' => 'lastProductSendingJobTime', 'title' => Mage::helper('hooks')->__('Last Product Submission Job Time'), 'label' => Mage::helper('hooks')->__('Last Product Submission Job Time'), 'required' => false, 'disabled' => 'disabled' ) ); $fieldsetAutoSub->addField( 'productSendingJobRunCount', 'text', array( 'name' => 'productSendingJobRunCount', 'title' => Mage::helper('hooks')->__('Product Submission Job Run Count'), 'label' => Mage::helper('hooks')->__('Product Submission Job Run Count'), 'required' => false, 'disabled' => 'disabled' ) ); if (method_exists(Mage::helper('core/data'), 'isModuleEnabled')) { $gcaEnabled = Mage::helper('core/data')->isModuleEnabled('Enterprise_GiftCardAccount'); } else { $gcaEnabled = true; } $fieldOptions = array( 'name' => 'useOmxGiftCertificates', 'title' => Mage::helper('hooks')->__('Use Omx Gift Certificates'), 'label' => Mage::helper('hooks')->__('Use Omx Gift Certificates'), 'required' => false, 'disabled' => 'disabled', ); if(!$gcaEnabled) { $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks')->__('To use this feature activate GiftCardAccount module.').'</div>'; } elseif (!Mage::helper('core/data')->isModuleOutputEnabled('Enterprise_GiftCardAccount')) { $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks')->__('To use this feature enable output for GiftCardAccount module.').'</div>'; } $fieldsetGiftCert->addField('useOmxGiftCertificates', 'checkbox', $fieldOptions ); $fieldOptions = array( 'name' => 'useOmxTaxCalculation', 'title' => Mage::helper('hooks/data')->__('Use Omx Tax Calculation'), 'label' => Mage::helper('hooks/data')->__('Use Omx Tax Calculation'), 'required' => false, 'value' => '1', 'disabled' => 'disabled', ); $afterElementHtml = ''; if (!Mage::helper('hooks/omxpricing')->canUseOmxTax()) { $afterElementHtml .= '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature Magento must be configured to exlcude taxes in catalog- and shipping-prices.').'</div>'; } if(Mage::getStoreConfig('google/checkout/active') == 1 ) { $afterElementHtml .= '<div class="error">'. Mage::helper('hooks/data')->__('Google Checkout is enabled: When using this payment gateway <i>Magento Tax Calculation</i> will be used during checkout.').'</div>'; } if (strlen($afterElementHtml) >=1 ) { $fieldOptions['after_element_html'] = $afterElementHtml; } $fieldsetTaxCalc->addField('useOmxTaxCalculation', 'checkbox', $fieldOptions); $fieldsetTaxCalc->addField( 'omxTaxMagentoFallbackMessage', 'text', array( 'name' => 'omxTaxMagentoFallbackMessage', 'title' => Mage::helper('hooks/data')->__('Custom fronted message for usage of Magento tax'), 'label' => Mage::helper('hooks/data')->__('Custom fronted message for usage of Magento tax'), 'required' => false, 'disabled' => 'disabled', ) ); $fieldsetTaxCalc->addField( 'omxTaxOmxFallbackMessage', 'text', array( 'name' => 'omxTaxOmxFallbackMessage', 'title' => Mage::helper('hooks/data')->__('Custom fronted message for usage of OMX tax'), 'label' => Mage::helper('hooks/data')->__('Custom fronted message for usage of OMX tax'), 'required' => false, 'disabled' => 'disabled', ) ); $fieldOptions = array( 'name' => 'useOmxMarketingPolicies', 'title' => Mage::helper('hooks/data')->__('Use OMX Markting Policies for discount calculation'), 'label' => Mage::helper('hooks/data')->__('Use OMX Markting Policies for discount calculation'), 'required' => false, 'disabled' => 'disabled' ); $canUseOmxDiscount = Mage::helper('hooks/omxpricing')->canUseOmxDiscount(); if(!$canUseOmxDiscount) { $fieldOptions['after_element_html'] = '<div class="error">'.Mage::helper('hooks/data')->__('To use this feature Omx Tax Calculation must be enabled.').'</div>'; } $fiedsetDiscountCalc->addField( 'useOmxMarketingPolicies', 'checkbox', $fieldOptions ); $fieldOptions = array( 'name' => 'sendPaypalBillingAgreementID', 'title' => Mage::helper('hooks/data')->__('Automatically Send Paypal Billing Agreements to OMX'), 'label' => Mage::helper('hooks/data')->__('Automatically Send Paypal Billing Agreements to OMX'), 'required' => false, 'disabled' => 'disabled' ); $fiedsetPaypalSettings->addField( 'sendPaypalBillingAgreementID', 'checkbox', $fieldOptions ); $form->setUseContainer(true); $defaultValues = $this->_getDefaultValues(); $form->addValues ( $defaultValues ); if( Mage::getModel('hooks/connector')->isConfigured()){ $form->getElement('configured')->setIsChecked(true); } else { $form->getElement('configured')->setIsChecked(false); } if( $defaultValues['connectorEnabled']){ $form->getElement('connectorEnabled')->setIsChecked(true); } else { $form->getElement('connectorEnabled')->setIsChecked(false); } if( $defaultValues['debugMode']){ $form->getElement('debugMode')->setIsChecked(true); } else { $form->getElement('debugMode')->setIsChecked(false); } if( $defaultValues['forceMagentoPrices']){ $form->getElement('forceMagentoPrices')->setIsChecked(true); } else { $form->getElement('forceMagentoPrices')->setIsChecked(false); } if( $defaultValues['refreshInventory']){ $form->getElement('refreshInventory')->setIsChecked(true); } else { $form->getElement('refreshInventory')->setIsChecked(false); } if( $defaultValues['autoCreateCoupons']){ $form->getElement('autoCreateCoupons')->setIsChecked(true); } else { $form->getElement('autoCreateCoupons')->setIsChecked(false); } if( $defaultValues['checkOrderTotalAmount']){ $form->getElement('checkOrderTotalAmount')->setIsChecked(true); } else { $form->getElement('checkOrderTotalAmount')->setIsChecked(false); } if( $defaultValues['useOmxGiftCertificates']){ $form->getElement('useOmxGiftCertificates')->setIsChecked(true); } else { $form->getElement('useOmxGiftCertificates')->setIsChecked(false); } if( $defaultValues['useOmxTaxCalculation']){ $form->getElement('useOmxTaxCalculation')->setIsChecked(true); } else { $form->getElement('useOmxTaxCalculation')->setIsChecked(false); } if( $defaultValues['useOmxMarketingPolicies']){ $form->getElement('useOmxMarketingPolicies')->setIsChecked(true); } else { $form->getElement('useOmxMarketingPolicies')->setIsChecked(false); } if( $defaultValues['sendPaypalBillingAgreementID']){ $form->getElement('sendPaypalBillingAgreementID')->setIsChecked(true); } else { $form->getElement('sendPaypalBillingAgreementID')->setIsChecked(false); } $this->setForm($form); return parent::_prepareForm(); } private function _getDefaultValues () { $model = Mage::getModel('hooks/settings'); $collection = $model ->getCollection() ->load(); $results = array(); foreach( $collection->getItems() as $value ){ $tempValue = $value->toArray(); if( $value->isVisible()){ $results[$tempValue['name']] = $tempValue['value']; } } return $results; } }