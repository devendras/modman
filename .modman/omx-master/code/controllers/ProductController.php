<?php
 class Omx_Hooks_ProductController extends Mage_Adminhtml_Controller_Action { const OMX_RECHECK = 10; protected function _initProduct() { $this->_title($this->__('Catalog')) ->_title($this->__('Manage Products')); $productId = (int) $this->getRequest()->getParam('id'); $product = Mage::getModel('catalog/product') ->setStoreId($this->getRequest()->getParam('store', 0)); if (!$productId) { if ($setId = (int) $this->getRequest()->getParam('set')) { $product->setAttributeSetId($setId); } if ($typeId = $this->getRequest()->getParam('type')) { $product->setTypeId($typeId); } } $product->setData('_edit_mode', true); if ($productId) { $product->load($productId); } $attributes = $this->getRequest()->getParam('attributes'); if ($attributes && $product->isConfigurable() && (!$productId || !$product->getTypeInstance()->getUsedProductAttributeIds())) { $product->getTypeInstance()->setUsedProductAttributeIds( explode(",", base64_decode(urldecode($attributes))) ); } Mage::register('product', $product); Mage::register('current_product', $product); return $product; } public function indexAction () { $product = $this->_initProduct(); $products = Mage::getModel('catalog/product')->getCollection() ->addAttributeToSelect("omx_last_checked"); $wantedProduct = $products->getItemById($product->getId()); $last_check = $wantedProduct->getOmxLastChecked(); if (is_null($last_check)) $last_check = '1997/01/01'; $checked = new Zend_Date($last_check, 'yyyy-MM-dd HH:mm:ss'); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); $checked->addMinute(self::OMX_RECHECK); if (!$now->isEarlier($checked)) { $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::UI_FUNCTIONS, $this->_getSession())); $productHelper->setDataFromOmxItem($stringDate); } $this->_initLayoutMessages('adminhtml/session'); $messages = $this->getLayout()->getMessagesBlock()->getGroupedHtml(); $this->getResponse()->setBody( $messages . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_standingOrders')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_paymentPlans')->toHtml() ); } public function checkNowAction() { $product = $this->_initProduct(); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::UI_FUNCTIONS, $this->_getSession())); if ($productHelper->setDataFromOmxItem($stringDate)) $this->_getSession()->addSuccess(Mage::helper('hooks')->__('The product has been checked with OMX.')); $this->_initLayoutMessages('adminhtml/session'); $messages = $this->getLayout()->getMessagesBlock()->getGroupedHtml(); $this->getResponse()->setBody( $messages . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_standingOrders')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_paymentPlans')->toHtml() ); } public function createAction() { $product = $this->_initProduct(); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::UI_FUNCTIONS, $this->_getSession())); if($productHelper->pushDataToOmx(true, $stringDate)) { if( $productHelper->pushInventoryToOmx() & $productHelper->pushPricesToOmx() & $productHelper->pushCustomizationsToOmx() & $productHelper->pushSubitemsToOmx() ) { $this->_getSession()->addSuccess(Mage::helper('hooks')->__('The product has been created in OMX.')); } } $productHelper->setDataFromOmxItem($stringDate); $this->_initLayoutMessages('adminhtml/session'); $messages = $this->getLayout()->getMessagesBlock()->getGroupedHtml(); $this->getResponse()->setBody( $messages . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_standingOrders')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_paymentPlans')->toHtml() ); } public function pushNowAction() { $product = $this->_initProduct(); $now = Zend_Date::now(); $now->setTimezone('America/New_York'); $stringDate = $now->toString('yyyy-MM-dd HH:mm:ss'); $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::UI_FUNCTIONS, $this->_getSession())); if( $productHelper->pushDataToOmx(false, $stringDate) & $productHelper->pushPricesToOmx() & $productHelper->pushCustomizationsToOmx() & $productHelper->pushSubitemsToOmx() ) { $this->_getSession()->addSuccess(Mage::helper('hooks')->__('The product has been pushed to OMX.')); } $productHelper = Mage::getModel('hooks/product', array($product, Omx_Hooks_Model_Product::UI_FUNCTIONS, $this->_getSession())); $productHelper->setDataFromOmxItem($stringDate); $this->_initLayoutMessages('adminhtml/session'); $messages = $this->getLayout()->getMessagesBlock()->getGroupedHtml(); $this->getResponse()->setBody( $messages . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_standingOrders')->toHtml() . $this->getLayout()->createBlock('hooks/catalog_product_edit_tab_omx_paymentPlans')->toHtml() ); } } 