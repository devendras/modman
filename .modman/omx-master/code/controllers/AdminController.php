<?php
 class Omx_Hooks_AdminController extends Mage_Adminhtml_Controller_Action { public $_moduleConfigured = false; public function preDispatch() { parent::preDispatch(); $session = Mage::getSingleton('admin/session'); $request = $this->getRequest(); $user = $session->getUser(); if (!$user) { Mage::throwException(Mage::helper('hooks')->__('OMX Magento session - your login has expired')); $request->setDispatched(FALSE); } $this->_moduleConfigured = Mage::getModel('hooks/connector')->isConfigured(); } public function indexAction () { $layout = $this->loadLayout() ->_addContent($this->getLayout()->createBlock('hooks/admin_main')) ->renderLayout(); } public function editAction() { $this->loadLayout(); $editBlock = $this->getLayout()->createBlock('hooks/admin_edit'); $params = $this->getRequest()->getParams(); if (array_key_exists('error', $params)) { $messages = $editBlock->getMessagesBlock(); $messages->addError(urldecode($params['error'])); $editBlock->setMessagesBlock($messages); } if (array_key_exists('success', $params)) { $messages = $editBlock->getMessagesBlock(); $messages->addSuccess(urldecode($params['success'])); $editBlock->setMessagesBlock($messages); } $this->_addContent($editBlock); $this->renderLayout(); } public function resubmitAction() { $id = (int)$this->getRequest()->getParam('id'); $data = Mage::getModel('hooks/data')->getCollection()->load(); $omxEntry = $data->getItemById($id); $existingXmlString = Mage::helper('core')->decrypt($omxEntry->getXmlString()); if ($existingXmlString){ $xmlObject = Mage::getModel('hooks/xml_order_resubmit_request', $existingXmlString); if( $xmlObject instanceof Omx_Hooks_Model_Xml_Abstract ){ $times = $omxEntry->getResubmited() + 1; $omxEntry->setResubmited($times); $omxEntry->save(); $omx_now = Zend_Date::now(); $omx_now->setTimezone('America/New_York'); $credentials = array( 'xml' => $xmlObject, 'order_id' => $omxEntry->getOrderId(), 'status' => 0, 'response' => "", 'parent_id' => $omxEntry->getId(), 'timestamp' => $omx_now->toString("yyyy-MM-dd HH:mm:ss") ); $connector = Mage::getModel('hooks/connector'); $omxOrderId = $connector->callOmx(Omx_Hooks_Model_Connector::CALL_TYPE_UDOA, $credentials); if ($omxOrderId) { $omxEntry->setStatus($omxOrderId); $omxEntry->save(); } $this->getResponse()->setRedirect($this->getUrl('*/*/data')); } else { Mage::throwException(Mage::helper('hooks')->__('OMX error - XML could not be parsed')); } } else { Mage::throwException(Mage::helper('hooks')->__('OMX error - XML data not available for resubmittion')); } } public function saveAction() { $data = $this->getRequest()->getPost(); $validated = $this->_validatePostData($data); if (is_array ($validated)) { $connectivity = Mage::getModel('hooks/connector')->isConfigured(true, $validated); if ($connectivity) { $settings = Mage::getModel('hooks/settings')->getCollection()->load(); foreach ($settings as $setting) { if ($setting->isEditable()) { if ($setting->name === 'connectorEnabled' || $setting->name === 'debugMode' || $setting->name === 'forceMagentoPrices' || $setting->name === 'refreshInventory' || $setting->name === 'autoCreateCoupons' || $setting->name === 'checkOrderTotalAmount' || $setting->name === 'useOmxGiftCertificates' || $setting->name === 'useOmxTaxCalculation' || $setting->name === 'useOmxMarketingPolicies' || $setting->name === 'sendPaypalBillingAgreementID' ) { if (array_key_exists($setting->name, $validated)) { $setting->value = 1; } else { $setting->value = 0; } } else { if (array_key_exists($setting->name, $validated)) { $setting->value = $validated[$setting->name]; } } $setting->save(); } } $this->getResponse()->setRedirect($this->getUrl('*/*/')); } else { if(!array_key_exists('connectorEnabled', $validated) && Mage::helper('hooks/data')->getSettings('connectorEnabled') == 1) { try { Mage::helper('hooks/data')->setSettings('connectorEnabled', 0); } catch (Exception $e) { Mage::helper('hooks/data')->log(null, null, 'Error saving settings'); } $this->_redirect('*/*/edit', array('success' => __('The connector was successfully disabled regardless the displayed errors.'), 'error' => __('Connectivity failed. Please recheck the values.'))); } else { $this->_redirect('*/*/edit', array('error' => __('Connectivity failed. Please recheck the values.'))); } } } else { $this->_redirect('*/*/edit', array('error' => __($validated))); } } public function dataAction() { $layout = $this->loadLayout() ->_addContent($this->getLayout()->createBlock('hooks/admin_data')) ->renderLayout(); } private function _validatePostData ( $raw ) { $validated = $raw; if (array_key_exists('autoProductSendingTime', $raw)) { $time = $validated['autoProductSendingTime']; if ($time != '' && !preg_match('/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/', $time)) $validated = Mage::helper('hooks')->__('Invalid "daily auto-submission time" field value. Valid format: one or two digits for hour, two for minute and ":" as a delimiter (e.g.: 7:05 or 22:30)'); } return $validated; } public function checkConfigAction() { $udiAuthToken = Mage::getModel('hooks/connector')->udiAuthToken; if (strlen($udiAuthToken) != 255 ){ $this->doConfigNotice('hooks/checkconfig'); return; } } public function doConfigNotice($menu) { $this->loadLayout() ->_setActiveMenu($menu) ->_addBreadcrumb(Mage::helper('hooks')->__('OMX Connector Not Configured'), Mage::helper('hooks')->__('OMX Connector Not Configured')); $text = 'Omx module is not configured'; $textblock = $this->getLayout()->createBlock('core/text'); $textblock->addText($text); $this->_addContent( $textblock ); $this->renderLayout(); } public function historyAction () { $id = (int)$this->getRequest()->getParam('id'); $key = (string)$this->getRequest()->getParam('key'); $data = Mage::getModel('hooks/data')->getCollection()->load(); $omxEntry = $data->getItemById($id); if ($omxEntry instanceof Omx_Hooks_Model_Data){ $children = $omxEntry->getChildren(); $block = $this->getLayout()->createBlock('hooks/admin_history'); $block->addData(array( 'children' => $children, 'parent' => $omxEntry, 'key' => $key )); $this->loadLayout(); $this->_addContent($block); $this->renderLayout(); } else { Mage::throwException(Mage::helper('hooks')->__('OMX error - entry id not found: ', $id)); } } public function viewAction () { $id = (int)$this->getRequest()->getParam('id'); $data = Mage::getModel('hooks/data')->getCollection()->load(); $omxEntry = $data->getItemById($id); if ($omxEntry instanceof Omx_Hooks_Model_Data){ $block = $this->getLayout()->createBlock('hooks/admin_view', null, array('omx_id'=>$id)); $xmlEncoded = $omxEntry->getXmlString(); $xmlDecoded = Mage::helper('core')->decrypt($xmlEncoded); $xmlWithoutCC = $responseWithoutCC = ''; if ($xmlDecoded){ $xml = new DOMDocument (); try { $xml->loadXML ($xmlDecoded); } catch (Exception $e) { Mage::throwException(Mage::helper('hooks')->__('OMX error - XML is not parsable: ', $xmlDecoded)); } $cardResults = $xml->getElementsByTagName ('CardNumber'); if ($cardResults->length) { foreach ($cardResults as $card) { $card->nodeValue = "***********"; } } $xmlWithoutCC = $xml->saveXML(); } $responseEncoded = $omxEntry->getResponse(); $responseDecoded = Mage::helper('core')->decrypt($responseEncoded); if ($responseDecoded){ $response = new DOMDocument(); $response->loadXML($responseDecoded); $cardResponseResults = $response->getElementsByTagName('CardNumber'); if ($cardResponseResults->length) { foreach ($cardResponseResults as $cardResponse){ $cardResponse->nodeValue = "***********"; } } $responseWithoutCC = $response->saveXML(); } $this->loadLayout(); $this->_addContent($block); $block->addData(array( 'omx_id' => $omxEntry->getOmxId(), 'xml_string' => $xmlWithoutCC, 'order_id' => $omxEntry->getOrderId(), 'status' => $omxEntry->getStatus(), 'response' => $responseWithoutCC, 'timestamp' => $omxEntry->getTimestamp(), 'resubmited' => $omxEntry->getResubmited(), 'parent_id' => $omxEntry->getParentId() )); $this->renderLayout(); } else { Mage::throwException(Mage::helper('hooks')->__('OMX error - entry id not found: ', $id)); } } public function searchAction () { $this->loadLayout(); $block = $this->getLayout()->createBlock('hooks/admin_search'); $messages = $block->getMessagesBlock(); if(array_key_exists('search', $_POST)) { $id = (int)$_POST['search']; $orderEntry = Mage::getModel('sales/order')->loadByIncrementId($id); if ($orderEntry instanceof Mage_Sales_Model_Order) { $omxEntries = Mage::getModel('hooks/data') ->getCollection() ->addFieldToFilter('order_id',array('eq' => $id)); if ($omxEntries->count()) { $omxEntriesData = array(); foreach ($omxEntries as $omxEntry) { $omxEntriesData[] = $omxEntry; } $resultsBlock = $this->getLayout()->createBlock('hooks/admin_search_results'); $resultsBlock->addData(array( 'omxEntries' => $omxEntriesData )); $this->_addContent($resultsBlock); } else { $messages->addError(Mage::helper('hooks')->__('this Magento order('. $id .') doesn\'t appear in the OMX records')); } } else { $messages->addError(Mage::helper('hooks')->__('the Magento order that you provided id is not valid: ', $id)); } } $block->setMessagesBlock($messages); $this->_addContent($block); $this->renderLayout(); } public function bulkAction () { $this->loadLayout(); $block = $this->getLayout()->createBlock('hooks/admin_bulk'); $messages = $block->getMessagesBlock(); if ($this->getRequest()->isPost()) { $params = $this->getRequest()->getParams(); $minOrder = Mage::getModel('sales/order')->loadByIncrementId((int)$params['min']); $maxOrder = Mage::getModel('sales/order')->loadByIncrementId((int)$params['max']); if ( ($params['options'] == 1 || $params['options'] == 2) && $minOrder->getIncrementId() && $maxOrder->getIncrementId() ) { $resendFlag = ($params['options'] == 1)? true : false; $orderSet = Mage::getModel('sales/order')->getCollection() ->addFieldToFilter('increment_id',array('gteq' => $minOrder->getIncrementId())) ->addFieldToFilter('increment_id', array('lteq'=> $maxOrder->getIncrementId())) ->load(); $sentOrders = array(); foreach ($orderSet as $order) { $hasBeenSent = false; $omxEntries = Mage::getModel('hooks/data') ->getCollection() ->addFieldToFilter('order_id',array('eq' => $order->getIncrementId())); if ($omxEntries->count()) { $hasBeenSent = true; } if (!$hasBeenSent || ($hasBeenSent && $resendFlag)) { $connectorEnabled = Mage::getModel('hooks/connector')->connectorEnabled; if ($connectorEnabled && $this->_moduleConfigured) { $omxStatus = Omx_Hooks_Model_Order_Transfer::send($order); $omxId = Mage::getModel('hooks/data') ->getCollection() ->addFieldToFilter('order_id',array('eq' => $order->getIncrementId())) ->setOrder('omx_id', 'DESC') ->load() ->getFirstItem() ->getData('omx_id'); $sentOrders[$order->getIncrementId()]= $omxId; } else { $messages->addError(Mage::helper('hooks')->__('OrderID:' . $order->getIncrementId(). ' was not sent.Module not active or not properly configured')); } } } $resultsBlock = $this->getLayout()->createBlock('hooks/admin_bulk_results'); $resultsBlock->addData(array( 'sentOrders' => $sentOrders )); $this->_addContent($resultsBlock); } else { $messages->addError(Mage::helper('hooks')->__('Invalid interval values. Start/end orders must exist.\n you provided: ['. (int)$params['min'] .'|'. (int)$params['max'].'] ')); } } $block->setMessagesBlock($messages); $this->_addContent($block); $this->renderLayout(); } public function productbulkAction () { $this->loadLayout(); $block = $this->getLayout()->createBlock('hooks/admin_productbulk'); $messages = $block->getMessagesBlock(); if ($this->getRequest()->isPost()) { $settings = Mage::getModel('hooks/settings')->getCollection()->load(); foreach ($settings as $setting) { if ($setting->name === 'forceProductSending') { $setting->value = 1; $setting->save(); } } $messages->addSuccess(Mage::helper('hooks')->__('The bulk transmission process has been queued and will start within the next 5 minutes. You will receive a message in the administration dashboard when the process has completed.')); $block->removeSaveButtons(); } else { $products = Mage::getModel('catalog/product')->getCollection() ->addAttributeToFilter( array( array('attribute'=>'omx_product_exists', 'neq'=>'1'), array('attribute'=>'omx_product_exists', 'null'=>'null') ), '', 'left' ) ->addAttributeToFilter( array( array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_SIMPLE), array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_VIRTUAL), array('attribute'=>'type_id', 'eq'=>Mage_Downloadable_Model_Product_Type::TYPE_DOWNLOADABLE), array('attribute'=>'type_id', 'eq'=>Mage_Catalog_Model_Product_Type::TYPE_CONFIGURABLE) ), '' ); $potencialProducts = $products->getItems(); $eligibleProducts = array(); foreach ($potencialProducts as $product) { $configurableModel = Mage::getModel('Mage_Catalog_Model_Product_Type_Configurable'); $parentsIds = $configurableModel->getParentIdsByChild($product->getId()); if ( count($parentsIds) === 0 ) { $eligibleProducts[] = $product; } } if (count($eligibleProducts)) { $connector = Mage::getModel('hooks/connector'); $message = Mage::helper('hooks')->__('There are'); $message .= ' ' . count($eligibleProducts) . ' '; $message .= Mage::helper('hooks')->__('eligible new products in this Magento store that have not yet been transmitted to OMX.'); if ($connector->forceProductSending) { $message .= ' '; $message .= Mage::helper('hooks')->__('These products are being transmitted to OMX or they are scheduled to do so within the next 5 minutes.'); $block->removeSaveButtons(); } elseif ($connector->autoProductSendingTime != '') { $message .= ' '; $message .= Mage::helper('hooks')->__('These products will be automatically transmitted to OMX in the scheduled daily process at'); $message .= ' ' . $connector->autoProductSendingTime . ' '; $message .= Mage::helper('hooks')->__('or you can mark the process to start now by clicking the button below.'); } else { $message .= ' '; $message .= Mage::helper('hooks')->__('You can have the connector submit these products in bulk, by clicking the button below.'); } $messages->addNotice($message); } else { $messages->addWarning(Mage::helper('hooks')->__('There are no eligible products in this Magento store that have not already been submitted to OMX.')); $block->removeSaveButtons(); } } $block->setMessagesBlock($messages); $this->_addContent($block); $this->renderLayout(); } public function omxAction () { $order = Mage::getModel('sales/order')->loadByIncrementId('100000165'); if ($order instanceof Mage_Sales_Model_Order) { $omxOrder = Mage::getModel('hooks/order'); $omxOrder->loadFromOrder($order); echo "<pre>"; var_dump($omxOrder); } } } 